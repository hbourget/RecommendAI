{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# __CPE__ 2022-23\n",
    "\n",
    "## Text Mining \n",
    "\n",
    "<font size=\"5\"> Analyse de Polarités  des avis sur des achats +  Classification de phrases</font> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* __Objectifs__ : apprendre par mimétisme à partir d'exemples\n",
    "- Appliquer de multiples techniques/méthodes et donner un tableau comparatif "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Traitements effectués (et les scores) en vue de \"choisir\" le meilleur modèle**\n",
    "__Les scores d'une précédente exécution__  <font color=\"red\"> (changement possible)</font>\n",
    "* Préparation : Codage Tf (Term frequency) puis TfIdf (Term frequency Inverse Document Frequency)\n",
    "* Méthode AD : Un seul Arbre de Décision : score 0.71\n",
    "* Méthode RF : Random Forest (50) : score 0.77\n",
    "* Evaluation : ROC de RF (AUC = 0.84)\n",
    "* Méthode : Logit : score 0.80\n",
    "* Méthode : MNB : score 0.81 (MultiNomialBayes)\n",
    "* Méthode : RF (avec différents depths) et tjs 50 trees\n",
    "    - clf10 : score = 0.74 (Profondeur 10, \"clf\" = classifieur)\n",
    "    - clf30 : score = 0.785\n",
    "    - clf50 : score = 0.796\n",
    "    - clf70 : score = 0.785\n",
    "    - clf90 : score = 0.789\n",
    "\n",
    "* Méthode : RF avec 200 arbres / depth 50 : score = 0.788\n",
    "* Méthode : GBoost : score = 0.78\n",
    "\n",
    "<font size=\"4\">On décide de choisir Logit pour la suite (on pourrait prendre MNB, voir ci-après)</font>\n",
    "* Préparation : n-grams (démo n=3 : 3-grams)\n",
    "* Préparation : n-gramm (n=2) sur lesquels on fait TfIdf puis\n",
    "* Méthode : Logit : score = 0.8\n",
    "* Test / Validation : même chose (Logit) avec XV : score = 0.84 <--- Best2\n",
    "* Préparation : n-gramm (n=2) sur lesquels on fait TfIdf puis\n",
    "* Méthode : MNB avec Test / Validation XV (avec 20 folds) : score = 0.853 <--- Best1\n",
    "\n",
    "<font size=\"4\">On délaisse les n-grams (on revient au mono-gram)</font>\n",
    "* Préparation : La représentation Tf puis réduction à 50 features par SVD puis\n",
    "* Méthode : RF : score = 0.68\n",
    "* Méthode : Logit (sur ce rézsultat SVD) : 0.75\n",
    "* Préparation : On reprend TfIdf puis SVD à 300 features\n",
    "* Méthode : Logit (sur TfIdf x SVD à 300) : score = 0.78\n",
    "\n",
    "<font size=\"4\">Word2Vect</font>\n",
    "* Préparation : Word2Vect sur la BD d'origine (Word2vect avec vecteur de mot de taille 300, taille window=20) !\n",
    "* Préparation : Doc2Vect manuelle (somme des vecteurs Word2Vect)\n",
    "* Méthode : Logit sur ce Doc2Vect : score = 0.56\n",
    "\n",
    "<font size=\"4\">Reste à faire (délicat) Word2Vect sur données pré-entrainées Google avec spacy </br>\n",
    "Lire ci-dessous \"A propose des classifieurs en Text Mining appliqués\"</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Savoir où on est (sur nos machines)\n",
    "\n",
    "Pour connaître la version du Python, le répertoire actuel et vérifier si les fichiers s'y trouvent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.9.13 (main, Aug 25 2022, 23:26:10) \n",
      "[GCC 11.2.0]\n",
      "/home/alex/TextMining-Big-Data/Big-Data-22-23/100-BE-22-23-ECL-From-21-22/Codes-22-23/POUR-CPE-DM-22-23\n",
      "['DF_Papers.csv', 'sentiment_labelled_sentences.zip', '1-OK-Polarite-sentiments-2023-Sujet-principal.ipynb', 'sentiment labelled sentences', '.ipynb_checkpoints', '__MACOSX', 'Untitled.ipynb']\n",
      "/home/alex/TextMining-Big-Data/Big-Data-22-23/100-BE-22-23-ECL-From-21-22/Codes-22-23/POUR-CPE-DM-22-23\n",
      " 1-OK-Polarite-sentiments-2023-Sujet-principal.ipynb\n",
      " DF_Papers.csv\n",
      " __MACOSX\n",
      "'sentiment labelled sentences'\n",
      " sentiment_labelled_sentences.zip\n",
      " Untitled.ipynb\n"
     ]
    }
   ],
   "source": [
    "import os,sys\n",
    "\n",
    "# os.chdir(os.path.dirname(__file__)) # pour se placer dans le répertoire de \"ce\" fichier ipynb\n",
    "print(sys.version)\n",
    "print(os.getcwd())\n",
    "print(os.listdir())\n",
    "\n",
    "# On peut aussi bien écrire :\n",
    "!pwd  # ou %pwd\n",
    "!ls   # ou %ls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### La différence entre '!' et '%' :\n",
    "- %    s'adresse au noyau ipykernel      \n",
    "- !    s'adresse au shell (Linux)   \n",
    "\n",
    "D'une manière générale, une commande avec '!' s'exécute (via un processus) et on revient à l'état précédent\n",
    "tandis qu'avec '%', les effets (par exemple ce placer dans un répertoire) sont permanents.       \n",
    "Pour simplifier, les deux sont identiques (sauf dans quelques cas particuliers). \n",
    "\n",
    "**Exemples :**\n",
    "- !cd toto    \n",
    "nous place dans le répertoite 'toto' mais ensuite, on retourn au répertoire d'avant cette commande tandis que   \n",
    "- %cd toto    \n",
    "nous place dans \"toto\" et on y reste !\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=\"5\"> Revenons à notre sujet : Classification de phrases </font>\n",
    "En fouille de données textuelles, plus le vocabulaire est étendu, plus il faut des données !\n",
    "\n",
    "Le problème traité ici est (assez) classique en Text-Mining, on cherche à catégoriser des phrases en **Polarite positif ou négatif**. Ce pourrait être aussi classer des spams, résumer un texte, .....\n",
    "\n",
    "Le problème est ici simplifié : une donnée = <une phrase, un label>."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1- Les données\n",
    "\n",
    "Elles proviennent du data set \"Polarite Labelled Sentences Data Set\".\n",
    "\n",
    "Il faut installer (une seule fois), pour avoir ces données (et plein d'autres)\n",
    "* !pip3 install papierstat.datasets\n",
    "* !pip3 install papierstat\n",
    "* !pip3 install dbfread\n",
    "* !pip3 install geopandas\n",
    "* !pip3 install pyensae\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 - Chargement des données\n",
    "\n",
    "**Deux façons de faire (choisir l'une des deux) :** \n",
    "\n",
    "### 1.1.1) Chargement de la BD   __Soit directement par__  pip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "if False : # JE l'ai déjà fait ! Pour refaire, remplacer \"False\" par \"True\"\n",
    "    !pip install papierstat\n",
    "    !pip install pyquickhelper\n",
    "    !python3 -m pip install --upgrade pip\n",
    "    !pip install dbfread\n",
    "    !pip install pyensae\n",
    "    !pip install chardet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentence</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>So there is no way for me to plug it in here i...</td>\n",
       "      <td>0</td>\n",
       "      <td>amazon_cells_labelled</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good case, Excellent value.</td>\n",
       "      <td>1</td>\n",
       "      <td>amazon_cells_labelled</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great for the jawbone.</td>\n",
       "      <td>1</td>\n",
       "      <td>amazon_cells_labelled</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tied to charger for conversations lasting more...</td>\n",
       "      <td>0</td>\n",
       "      <td>amazon_cells_labelled</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The mic is great.</td>\n",
       "      <td>1</td>\n",
       "      <td>amazon_cells_labelled</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            sentence  sentiment  \\\n",
       "0  So there is no way for me to plug it in here i...          0   \n",
       "1                        Good case, Excellent value.          1   \n",
       "2                             Great for the jawbone.          1   \n",
       "3  Tied to charger for conversations lasting more...          0   \n",
       "4                                  The mic is great.          1   \n",
       "\n",
       "                  source  \n",
       "0  amazon_cells_labelled  \n",
       "1  amazon_cells_labelled  \n",
       "2  amazon_cells_labelled  \n",
       "3  amazon_cells_labelled  \n",
       "4  amazon_cells_labelled  "
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from papierstat.datasets import load_sentiment_dataset\n",
    "df_papers = load_sentiment_dataset()\n",
    "df_papers.head() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1.2) Chargement de la BD : __Soit en chargeant le fichier csv fourni__.\n",
    "\n",
    "__Remarque__ : ces données peuvent être téléchargées  (à demeure) : le fichier de données  \"amazon_cells_labelled.txt\" est égalment disponible et on peut charger (directement) l'archive sur  https://archive.ics.uci.edu/ml/machine-learning-databases/00331/\n",
    "* Le fichier  \"amazon_cells_labelled.txt\" est ef fait un fichier \".tsv\" : les classes données après une tabulation.\n",
    "- <ins> Notons que ce dernier n'a pas la colonne `source` (inutile pour nous ici)</ins>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentence</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>So there is no way for me to plug it in here i...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good case, Excellent value.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great for the jawbone.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tied to charger for conversations lasting more...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The mic is great.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            sentence  sentiment\n",
       "0  So there is no way for me to plug it in here i...          0\n",
       "1                        Good case, Excellent value.          1\n",
       "2                             Great for the jawbone.          1\n",
       "3  Tied to charger for conversations lasting more...          0\n",
       "4                                  The mic is great.          1"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import csv\n",
    "import pandas as pd\n",
    "csv_txt='./DF_Papers.csv'\n",
    "df_papers = pd.read_csv(csv_txt, header=0) \n",
    "df_papers.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2- Préparation des données     \n",
    "### 1.2.1) Conserver les colonnes utiles    \n",
    "on enlève la 3e colonne (source) du data frame (suivant la méthode de chargement)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Deux manières d'enlever la colonne \"source\" (si présente) :__\n",
    "1) __soit en tronquant directement le data frame__     \n",
    "Ici, pas d'erreur si la 3e col n'est pas présente.     "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__La 1ère solution :__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentence</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>So there is no way for me to plug it in here i...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good case, Excellent value.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great for the jawbone.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tied to charger for conversations lasting more...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The mic is great.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2995</th>\n",
       "      <td>I think food should have flavor and texture an...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2996</th>\n",
       "      <td>Appetite instantly gone.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2997</th>\n",
       "      <td>Overall I was not impressed and would not go b...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2998</th>\n",
       "      <td>The whole experience was underwhelming, and I ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2999</th>\n",
       "      <td>Then, as if I hadn't wasted enough of my life ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               sentence  sentiment\n",
       "0     So there is no way for me to plug it in here i...          0\n",
       "1                           Good case, Excellent value.          1\n",
       "2                                Great for the jawbone.          1\n",
       "3     Tied to charger for conversations lasting more...          0\n",
       "4                                     The mic is great.          1\n",
       "...                                                 ...        ...\n",
       "2995  I think food should have flavor and texture an...          0\n",
       "2996                           Appetite instantly gone.          0\n",
       "2997  Overall I was not impressed and would not go b...          0\n",
       "2998  The whole experience was underwhelming, and I ...          0\n",
       "2999  Then, as if I hadn't wasted enough of my life ...          0\n",
       "\n",
       "[3000 rows x 2 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_papers=df_papers[['sentence', 'sentiment']] # ON conserve 2 cols.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2) .__Soit par la fonction _drop_ de Pandas__     \n",
    "Evidemment, si vous avez appliqué la cellule précédente, vous aurez une erreur ici !"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__La 2e manière__ : erreur possible si colonne absente (d'où le try-except)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "try :\n",
    "    df_papers=df_papers.drop(['source'], axis=1) # axis=1 : concerne les colonnes\n",
    "except : pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vérifions que nous avon sbien 2 colonnes :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3000, 2)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_papers.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2.2) Renommage  des colonnes (attributs)   \n",
    "Pour plus de clarté, on **renomme** les colonnes des données en 'Avis' et 'Polarite'\n",
    "* __Avis__ est l'avis exprimé\n",
    "* __Polarite__ est l'opinion (sentiment) (0 ou 1 : négatif ou positif)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avis</th>\n",
       "      <th>Polarite</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>So there is no way for me to plug it in here i...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Good case, Excellent value.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Great for the jawbone.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tied to charger for conversations lasting more...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The mic is great.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2995</th>\n",
       "      <td>I think food should have flavor and texture an...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2996</th>\n",
       "      <td>Appetite instantly gone.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2997</th>\n",
       "      <td>Overall I was not impressed and would not go b...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2998</th>\n",
       "      <td>The whole experience was underwhelming, and I ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2999</th>\n",
       "      <td>Then, as if I hadn't wasted enough of my life ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   Avis  Polarite\n",
       "0     So there is no way for me to plug it in here i...         0\n",
       "1                           Good case, Excellent value.         1\n",
       "2                                Great for the jawbone.         1\n",
       "3     Tied to charger for conversations lasting more...         0\n",
       "4                                     The mic is great.         1\n",
       "...                                                 ...       ...\n",
       "2995  I think food should have flavor and texture an...         0\n",
       "2996                           Appetite instantly gone.         0\n",
       "2997  Overall I was not impressed and would not go b...         0\n",
       "2998  The whole experience was underwhelming, and I ...         0\n",
       "2999  Then, as if I hadn't wasted enough of my life ...         0\n",
       "\n",
       "[3000 rows x 2 columns]"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_papers=df_papers.rename(columns = {'sentence': 'Avis', 'sentiment' : 'Polarite'}) \n",
    "df_papers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Info :__ Les attributs (les colonnes de la matrice) sous 2 formes :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Avis', 'Polarite'], dtype=object)"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Les attributs (colonnes)\n",
    "df_papers.columns.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Avis', 'Polarite'], dtype='object')"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_papers.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Info : Combien de chaque polarité__ ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avis</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Polarite</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Avis\n",
       "Polarite      \n",
       "0         1500\n",
       "1         1500"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Si on veut un groupement inutile (car les Avis ne sont pas répétés)!\n",
    "#df_papers.groupby(['Avis', 'Polarite']).count() \n",
    "\n",
    "# Le bon groupement\n",
    "df_papers.groupby(['Polarite']).count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2- Vers l'analyse des \"avis\" (*sentiments*)\n",
    "## 2.1- Répartition des données pour l'analyse\n",
    "On les divise en 2 ensembles d'__apprentissage__ et de __test__\n",
    "\n",
    "**A propos du découpage en \"train\" et \"test\" ?**\n",
    "\n",
    "Voir https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html\n",
    "\n",
    "Et https://scikit-learn.org/stable/modules/cross_validation.html#stratification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__On découpe en train and test : par défaut 75% et 25%__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "# On découpe en train and test : par défaut 75% et 25%\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(df_papers[[\"Avis\"]], df_papers['Polarite'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Pour changer les proportions par défaut et avoir par exemple 80% 20%__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Pour changer les proportions par défaut et avoir par exemple 80% 20%\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = \\\n",
    "        train_test_split(df_papers[[\"Avis\"]], df_papers['Polarite'], train_size=0.80, test_size=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Combien dans chaque paquet train / test ?__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2400, 1)"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape  # les dimensions : (nb_lignes, nb_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(600, 1)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Text Mining : l'approche classique (vector space)\n",
    "   Rappel cours : on cherche à transformer le corpus en une matrice numérique pour y appliquer ensuite les méthodes \"classiques\" du Data Mining.\n",
    "   \n",
    "   Cette matrice peut contenir des valeurs (réelles) calculées de différentes façons; elles représenteront les \"termes\" (mots) dans le corpus. Une de ces façons est de calculer un indice `TfIdf` pour chaque mot du corpus.\n",
    "    \n",
    "<font color=\"red\"> TfIdf </font> est une méthode de convertion ses __mots__  en attributs __numériques__ (*features du vector space*).\n",
    "* `Tf(terme)` : *term fréquency* (pour un mot/terme) = la fréquence d'un terme dans le document\n",
    "* `Idf(terme)` : *Inverse document Frequency* (pour un mot/terme) = log(nombre total de documents __divisé__ par le nombre de documents où ce terme  apparaît;\n",
    "* `TfIdf(terme)` : $TF(terme) \\times Idf(terme)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2- Calcul de la matrice numérique "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.1- Un exemple simple de calcul de la matrice numérique (avec des données triviales pour tester)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "* * *\n",
    "**D'abord, un exemple simple de comptage des occurrences**   \n",
    "On se donne un texte simple :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['This is the first document.',\n",
       " 'This document seems to be the second document.',\n",
       " 'And this is the third one.',\n",
       " 'Is this the first fourth document or the third one from the second one !?']"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer # nécessaire !\n",
    "import pandas as pd \n",
    "corpus = [\n",
    "    'This is the first document.',\n",
    "    'This document seems to be the second document.',\n",
    "    'And this is the third one.',\n",
    "    'Is this the first fourth document or the third one from the second one !?',\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Puis compter les nb occurrences**    \n",
    "<u>Remarque :</u>     \n",
    "* _get_feature_names()_    \n",
    "OU (si erreur dûe à la version)     \n",
    "* _get_feature_names_out()_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['and' 'be' 'document' 'first' 'fourth' 'from' 'is' 'one' 'or' 'second'\n",
      " 'seems' 'the' 'third' 'this' 'to']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>and</th>\n",
       "      <th>be</th>\n",
       "      <th>document</th>\n",
       "      <th>first</th>\n",
       "      <th>fourth</th>\n",
       "      <th>from</th>\n",
       "      <th>is</th>\n",
       "      <th>one</th>\n",
       "      <th>or</th>\n",
       "      <th>second</th>\n",
       "      <th>seems</th>\n",
       "      <th>the</th>\n",
       "      <th>third</th>\n",
       "      <th>this</th>\n",
       "      <th>to</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   and  be  document  first  fourth  from  is  one  or  second  seems  the  \\\n",
       "0    0   0         1      1       0     0   1    0   0       0      0    1   \n",
       "1    0   1         2      0       0     0   0    0   0       1      1    1   \n",
       "2    1   0         0      0       0     0   1    1   0       0      0    1   \n",
       "3    0   0         1      1       1     1   1    2   1       1      0    3   \n",
       "\n",
       "   third  this  to  \n",
       "0      0     1   0  \n",
       "1      0     1   1  \n",
       "2      1     1   0  \n",
       "3      1     1   0  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vectorizer = CountVectorizer() #n comptage du nbr d'occ\n",
    "matrice_occurrences = vectorizer.fit_transform(corpus) # cette matrice est du type \"scipy sparse matrix\"\n",
    "print(vectorizer.get_feature_names_out()) #  get_feature_names, get_feature_names_out pour Python 3.9 (!)\n",
    "matrice = pd.DataFrame(matrice_occurrences.toarray(),columns=vectorizer.get_feature_names_out())\n",
    "matrice"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**On a donc notre matrice des occurrences**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.1.1- Matrice des n-grams (n=1...)     \n",
    "La matrice ci-dessus était la matrice des mono-grammes (mot seuls).     \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Si on veut la même chose pour les <ins>bi-grams</ins> (voir ci-dessous)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['and this' 'be the' 'document or' 'document seems' 'first document'\n",
      " 'first fourth' 'fourth document' 'from the' 'is the' 'is this' 'one from'\n",
      " 'or the' 'second document' 'second one' 'seems to' 'the first'\n",
      " 'the second' 'the third' 'third one' 'this document' 'this is' 'this the'\n",
      " 'to be']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>and this</th>\n",
       "      <th>be the</th>\n",
       "      <th>document or</th>\n",
       "      <th>document seems</th>\n",
       "      <th>first document</th>\n",
       "      <th>first fourth</th>\n",
       "      <th>fourth document</th>\n",
       "      <th>from the</th>\n",
       "      <th>is the</th>\n",
       "      <th>is this</th>\n",
       "      <th>...</th>\n",
       "      <th>second one</th>\n",
       "      <th>seems to</th>\n",
       "      <th>the first</th>\n",
       "      <th>the second</th>\n",
       "      <th>the third</th>\n",
       "      <th>third one</th>\n",
       "      <th>this document</th>\n",
       "      <th>this is</th>\n",
       "      <th>this the</th>\n",
       "      <th>to be</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   and this  be the  document or  document seems  first document  \\\n",
       "0         0       0            0               0               1   \n",
       "1         0       1            0               1               0   \n",
       "2         1       0            0               0               0   \n",
       "3         0       0            1               0               0   \n",
       "\n",
       "   first fourth  fourth document  from the  is the  is this  ...  second one  \\\n",
       "0             0                0         0       1        0  ...           0   \n",
       "1             0                0         0       0        0  ...           0   \n",
       "2             0                0         0       1        0  ...           0   \n",
       "3             1                1         1       0        1  ...           1   \n",
       "\n",
       "   seems to  the first  the second  the third  third one  this document  \\\n",
       "0         0          1           0          0          0              0   \n",
       "1         1          0           1          0          0              1   \n",
       "2         0          0           0          1          1              0   \n",
       "3         0          1           1          1          1              0   \n",
       "\n",
       "   this is  this the  to be  \n",
       "0        1         0      0  \n",
       "1        0         0      1  \n",
       "2        1         0      0  \n",
       "3        0         1      0  \n",
       "\n",
       "[4 rows x 23 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vectorizer = vectorizer2 = CountVectorizer(analyzer='word', ngram_range=(2, 2))\n",
    "matrice_occurrences = vectorizer.fit_transform(corpus)\n",
    "print(vectorizer.get_feature_names_out())#  get_feature_names, get_feature_names_out pour Python 3.9\n",
    "matrice = pd.DataFrame(matrice_occurrences.toarray(), columns=vectorizer.get_feature_names_out())#  get_feature_names, get_feature_names_out pour Python 3.9\n",
    "\n",
    "matrice"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.1.2- Le vocabulaire (bi-grammes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'this is': 20,\n",
       " 'is the': 8,\n",
       " 'the first': 15,\n",
       " 'first document': 4,\n",
       " 'this document': 19,\n",
       " 'document seems': 3,\n",
       " 'seems to': 14,\n",
       " 'to be': 22,\n",
       " 'be the': 1,\n",
       " 'the second': 16,\n",
       " 'second document': 12,\n",
       " 'and this': 0,\n",
       " 'the third': 17,\n",
       " 'third one': 18,\n",
       " 'is this': 9,\n",
       " 'this the': 21,\n",
       " 'first fourth': 5,\n",
       " 'fourth document': 6,\n",
       " 'document or': 2,\n",
       " 'or the': 11,\n",
       " 'one from': 10,\n",
       " 'from the': 7,\n",
       " 'second one': 13}"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Les valeurs seront les rangs (les indices)\n",
    "vectorizer.vocabulary_  # Le vocabulaire avec les indexes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_items([('this is', 20), ('is the', 8), ('the first', 15), ('first document', 4), ('this document', 19), ('document seems', 3), ('seems to', 14), ('to be', 22), ('be the', 1), ('the second', 16), ('second document', 12), ('and this', 0), ('the third', 17), ('third one', 18), ('is this', 9), ('this the', 21), ('first fourth', 5), ('fourth document', 6), ('document or', 2), ('or the', 11), ('one from', 10), ('from the', 7), ('second one', 13)])"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# La même chose sous forme d'une liste de tuples (utilisé dans une itération p. ex.)\n",
    "vectorizer.vocabulary_.items()  # les bi-grammes et leurs indices (rangs)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.1.3 Matrice TFIDF sur cet exemple\n",
    "**On a vu un exemple avec le comptage du nombre d'occurrence (mono & bi-grammes)**  \n",
    "**On continue avec un exemple de TfIdf simple (comme on avait fait avec les occurrences)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>and</th>\n",
       "      <th>be</th>\n",
       "      <th>document</th>\n",
       "      <th>first</th>\n",
       "      <th>fourth</th>\n",
       "      <th>from</th>\n",
       "      <th>is</th>\n",
       "      <th>one</th>\n",
       "      <th>or</th>\n",
       "      <th>second</th>\n",
       "      <th>seems</th>\n",
       "      <th>the</th>\n",
       "      <th>third</th>\n",
       "      <th>this</th>\n",
       "      <th>to</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.453491</td>\n",
       "      <td>0.560151</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.453491</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.370758</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.370758</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.415375</td>\n",
       "      <td>0.530257</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.327487</td>\n",
       "      <td>0.415375</td>\n",
       "      <td>0.216760</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.216760</td>\n",
       "      <td>0.415375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.559434</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.357079</td>\n",
       "      <td>0.441064</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.291936</td>\n",
       "      <td>0.441064</td>\n",
       "      <td>0.291936</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.193428</td>\n",
       "      <td>0.238922</td>\n",
       "      <td>0.303042</td>\n",
       "      <td>0.303042</td>\n",
       "      <td>0.193428</td>\n",
       "      <td>0.477844</td>\n",
       "      <td>0.303042</td>\n",
       "      <td>0.238922</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.474420</td>\n",
       "      <td>0.238922</td>\n",
       "      <td>0.158140</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        and        be  document     first    fourth      from        is  \\\n",
       "0  0.000000  0.000000  0.453491  0.560151  0.000000  0.000000  0.453491   \n",
       "1  0.000000  0.415375  0.530257  0.000000  0.000000  0.000000  0.000000   \n",
       "2  0.559434  0.000000  0.000000  0.000000  0.000000  0.000000  0.357079   \n",
       "3  0.000000  0.000000  0.193428  0.238922  0.303042  0.303042  0.193428   \n",
       "\n",
       "        one        or    second     seems       the     third      this  \\\n",
       "0  0.000000  0.000000  0.000000  0.000000  0.370758  0.000000  0.370758   \n",
       "1  0.000000  0.000000  0.327487  0.415375  0.216760  0.000000  0.216760   \n",
       "2  0.441064  0.000000  0.000000  0.000000  0.291936  0.441064  0.291936   \n",
       "3  0.477844  0.303042  0.238922  0.000000  0.474420  0.238922  0.158140   \n",
       "\n",
       "         to  \n",
       "0  0.000000  \n",
       "1  0.415375  \n",
       "2  0.000000  \n",
       "3  0.000000  "
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vectorizer = TfidfVectorizer()\n",
    "X = vectorizer.fit_transform(corpus)\n",
    "matrice = pd.DataFrame(X.toarray(),columns=vectorizer.get_feature_names_out())#  get_feature_names, get_feature_names_out pour Python 3.9\n",
    "matrice"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=\"5\"> Fin de l'exmples simple d'illustration et retour au corpus.</font>\n",
    "---\n",
    "* * *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**On reviens à la BD des sentiments (avis sur les achats)**      \n",
    "<font size=\"4\">Traitement des données de notre corpus étape par étape </font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.2 : Stemming et Lemmatization  de notre corpus\n",
    "\n",
    "**Pouruoi fire ? :  on filtre les mots (lemmatization) pour ne garder que les mots significatifs, ensuite on calcule la matrice TfIdf**\n",
    "\n",
    "Ces deux actions peuvent être regroupées dans un **pipeline**    \n",
    "On importe d'abord quelques outils."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importation du nécessaire"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "if False : # SI déjà fait, ne pas refaire\n",
    "    !pip install textblob\n",
    "    import nltk\n",
    "    nltk.download('brown')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package reuters to /home/alex/nltk_data...\n",
      "[nltk_data]   Package reuters is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('reuters')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "import numpy as np\n",
    "\n",
    "# Une seule fois :\n",
    "if False : # Si déjà fit\n",
    "    nltk.download('wordnet')\n",
    "    nltk.download('words')\n",
    "    nltk.download('punkt')    \n",
    "    nltk.download('averaged_perceptron_tagger')\n",
    "    nltk.download('brown')\n",
    "    nltk.download('stopwords')\n",
    "    nltk.download('omw-1.4')   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.stem import WordNetLemmatizer \n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.corpus import stopwords\n",
    "from textblob import TextBlob, Word\n",
    "\n",
    "import string\n",
    "\n",
    "# Initialisation du \"Wordnet Lemmatizer\"\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "#Pour tester :  print(lemmatizer.lemmatize(\"bats\"))\n",
    "\n",
    "\n",
    "from nltk.corpus import brown  # Il y a davantage de mots ici\n",
    "words = set(brown.words())\n",
    "\n",
    "#words = set(nltk.corpus.words.words()) : pas beaucoup de mots !\n",
    "stop_words=set(stopwords.words('english')); # \";\" pour ne pas avoir les résultats !"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.2.2.1 Lemmatization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__On définit notre lemmatizer qui pré-traitera  le corpus!__\n",
    "1) vérifier que nos \"mots\" sont parmi les mots acceptables (non \"usuels\") : dans \"words\"\n",
    "2) enlever les mots usuels (stopwords)\n",
    "3) enlever qq mots étranges\n",
    "4) enlever les ponctuations\n",
    "5) etc.\n",
    "6) Lemmatiser !    \n",
    "\n",
    "N.B. 'le' et 'u' sont mis \"à la main\" !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lemma(texte) :\n",
    "    #renvoie lemmatizer.lemmatize(texte)\n",
    "    return [lemmatizer.lemmatize(t) for t in word_tokenize(texte) if \\\n",
    "            t.lower() in words and \\\n",
    "            t.lower() not in stop_words \\\n",
    "            # cas des strs spécifiques non filtrés\n",
    "            and t not in [\"''\", '--', '1.2', '1/2', '18th', '2-3', '20th', '4.00', '4.2', '``', 'le', 'u']\\\n",
    "            #and t.lower() not in word_tokenize(stop_words).encode() \\ # génère un pb de 'byte' ?!\n",
    "            and t.lower() not in string.punctuation and not t.isdigit()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<font color=\"red\"> Ici : si warning sur stopwords, lancer cette cellule une 2e fois </font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Appliquer puis afficher quelques informations sont le corpus restant__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/alex/venv-conda-3.9/lib/python3.9/site-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\n",
      "/home/alex/venv-conda-3.9/lib/python3.9/site-packages/sklearn/feature_extraction/text.py:409: UserWarning: Your stop_words may be inconsistent with your preprocessing. Tokenizing the stop words generated tokens ['le', 'u'] not in stop_words.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Il y a  3201  termes dans le vocabulaire\n",
      "\n",
      "Les 50 premiers termes:\n",
      "['abandoned' 'ability' 'able' 'abound' 'abroad' 'absolute' 'absolutely'\n",
      " 'abysmal' 'academy' 'accent' 'accept' 'acceptable' 'access' 'accessible'\n",
      " 'accessory' 'accident' 'accidentally' 'acclaimed' 'accolade'\n",
      " 'accommodation' 'accompanied' 'according' 'accordingly' 'accountant'\n",
      " 'accurate' 'accurately' 'accused' 'ache' 'achievement' 'acknowledged'\n",
      " 'act' 'acted' 'acting' 'action' 'activate' 'activated' 'actor' 'actress'\n",
      " 'actual' 'actually' 'ad' 'adaptation' 'adapter' 'add' 'added' 'addition'\n",
      " 'additional' 'address' 'adhesive' 'admiration']\n",
      "\n",
      "Tous les 50 termes:\n",
      "['abandoned' 'admitted' 'annoying' 'astonishingly' 'banana' 'bird' 'bread'\n",
      " 'buying' 'cellular' 'church' 'comfortably' 'connected' 'cord' 'critic'\n",
      " 'decor' 'destroying' 'displeased' 'dropping' 'emotion' 'everybody'\n",
      " 'extensive' 'feeling' 'focused' 'frozen' 'glass' 'gyro' 'heroine' 'house'\n",
      " 'impulse' 'instead' 'joke' 'laugh' 'list' 'loyalty' 'masterpiece'\n",
      " 'miserable' 'narration' 'notice' 'order' 'painted' 'performing' 'plenty'\n",
      " 'preferably' 'propaganda' 'r' 'recognizes' 'remorse' 'ridiculous'\n",
      " 'sandwich' 'securely' 'sheer' 'sits' 'son' 'starlet' 'structure'\n",
      " 'support' 'teacher' 'thumb' 'trailer' 'unacceptable' 'unrealistic'\n",
      " 'video' 'washing' 'wish' 'zombie']\n",
      "\n",
      "Le nbr d'occurrence des 50 premiers termes :\n",
      "[('way', 3114), ('plug', 2054), ('unless', 2993), ('good', 1210), ('case', 383), ('excellent', 961), ('value', 3034), ('great', 1226), ('jawbone', 1490), ('tied', 2856), ('conversation', 590), ('lasting', 1543), ('problem', 2130), ('line', 1597), ('right', 2353), ('decent', 696), ('volume', 3075), ('dozen', 825), ('contact', 566), ('imagine', 1384), ('fun', 1160), ('sending', 2463), ('owner', 1935), ('needle', 1818), ('say', 2412), ('wasted', 3105), ('money', 1768), ('waste', 3104), ('time', 2859), ('sound', 2612), ('quality', 2192), ('impressed', 1393), ('going', 1207), ('original', 1908), ('battery', 219), ('extended', 999), ('mere', 1732), ('started', 2655), ('notice', 1852), ('excessive', 967), ('static', 2660), ('garbled', 1177), ('design', 739), ('odd', 1871), ('ear', 860), ('clip', 469), ('comfortable', 499), ('highly', 1310), ('recommend', 2253), ('blue', 269)]\n",
      "\n",
      "Le nbr d'occurrence des 50 premiers termes :\n",
      "[('occasion', 1865), ('bloodiest', 265), ('anymore', 105), ('allergy', 74), ('clue', 476), ('contain', 569), ('unprofessional', 3001), ('loyal', 1650), ('patron', 1979), ('occasional', 1866), ('anticipated', 103), ('concept', 534), ('poisoning', 2064), ('batch', 216), ('eve', 946), ('caring', 377), ('teamwork', 2804), ('degree', 712), ('downright', 823), ('hurry', 1362), ('reservation', 2326), ('stretch', 2694), ('ranch', 2207), ('dipping', 770), ('watered', 3111), ('garden', 1178), ('spotty', 2642), ('ensued', 921), ('apologize', 110), ('binge', 248), ('drinking', 844), ('profound', 2142), ('combo', 495), ('cart', 381), ('blame', 257), ('del', 713), ('hamburger', 1258), ('correction', 607), ('brownish', 321), ('ha', 1252), ('bigger', 246), ('sub', 2718), ('mile', 1743), ('brushfire', 323), ('dried', 840), ('caterpillar', 391), ('appetite', 117), ('instantly', 1450), ('poured', 2089), ('wound', 3182)]\n"
     ]
    }
   ],
   "source": [
    "count_vec_lemmatise = CountVectorizer(tokenizer=lemma, stop_words=\"english\", analyzer='word', \n",
    "                            ngram_range=(1, 1), max_df=1.0, min_df=0, max_features=None)\n",
    "\n",
    "# Transformer les données en  bag of words\n",
    "count_train = count_vec_lemmatise.fit(df_papers[\"Avis\"])\n",
    "bag_of_words_of_corpus = count_vec_lemmatise.transform(df_papers[\"Avis\"])\n",
    "\n",
    "# On enlève qq termes inutiles qui nous ont échappés (qui ont été créés par lemmatize)\n",
    "# Il s'agit d'un Dict de Python.\n",
    "for terme_a_jeter in ['n', 'u', 'ft'] :\n",
    "    count_train.vocabulary_.pop(terme_a_jeter, terme_a_jeter+\" n'y est ps !\")\n",
    "\n",
    "\n",
    "# Quelques prints \n",
    "print(\"Il y a \", len(count_train.vocabulary_), \" termes dans le vocabulaire\\n\")\n",
    "\n",
    "# Print Les 50 premiers termes\n",
    "print(\"Les 50 premiers termes:\\n{}\".format(np.array(count_vec_lemmatise.get_feature_names_out()[:50])))\n",
    "print(\"\\nTous les 50 termes:\\n{}\".format(np.array(count_vec_lemmatise.get_feature_names_out()[::50]))) # Tous les 50 termes\n",
    "#print(type(count_train.vocabulary_))\n",
    "#print(\"Vocabulary content:\\n {}\".format(count_train.vocabulary_))\n",
    "\n",
    "#les 50 premiers mots et leur nbr d'occurrence\n",
    "print(\"\\nLe nbr d'occurrence des 50 premiers termes :\")\n",
    "print([(k,v)  for k,v in count_train.vocabulary_.items()][:50])\n",
    "\n",
    "print(\"\\nLe nbr d'occurrence des 50 premiers termes :\")\n",
    "print([(k,v)  for k,v in count_train.vocabulary_.items()][-50:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=\"4\"> On peut faire la même chose avec une classe (Comptage du nbr d'occurrences) avec `lemma` du package  `pattern`</font>\n",
    "\n",
    "_On note que les résultats ne sont pas tout à fait les mêmes (pas les mêmes packages, pas les même dicos)_\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">Rappel : On a déjà fait le nécessaire plus hatut. </font>\n",
    "\n",
    "De plus, on a besoin du module \"pattern\" : difficile à installer sur certaines machnes (selon les versions de jupyter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "if False : # Mettre True si vou sn'avez jamais installé ce package\n",
    "    !pip install pattern"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\" size=\"3\"> Si warning sur stopwords, lancer cette cellule une 2e fois </font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Les 50 premiers termes:\n",
      "['abandon' 'abhor' 'ability' 'able' 'abound' 'abroad' 'absolute'\n",
      " 'absolutely' 'abstruse' 'abysmal' 'academy' 'accept' 'acceptable'\n",
      " 'access' 'accessible' 'accessory' 'accident' 'accidentally' 'accord'\n",
      " 'accordingly' 'accountant' 'accurate' 'accurately' 'accuse' 'ache'\n",
      " 'achievement' 'acknowledge' 'acros' 'act' 'action' 'activate' 'actor'\n",
      " 'actres' 'actual' 'actually' 'ad' 'adaptation' 'adapter' 'add' 'addition'\n",
      " 'additional' 'address' 'adhesive' 'admiration' 'admit' 'adorable'\n",
      " 'adrift' 'adventure' 'advise' 'aerial']\n",
      "\n",
      "Tous les 50 termes:\n",
      "['abandon' 'aesthetically' 'appeal' 'award' 'beauty' 'bold' 'bulky'\n",
      " 'catch' 'chow' 'comfortable' 'contain' 'crack' 'data' 'despite' 'distort'\n",
      " 'duo' 'end' 'exchange' 'far' 'flawlessly' 'frontier' 'gluten' 'halibut'\n",
      " 'hip' 'hut' 'indoor' 'ironside' 'large' 'lino' 'magnetic' 'meet'\n",
      " 'monotonou' 'neighborhood' 'older' 'palm' 'phantasm' 'point' 'president'\n",
      " 'puree' 'receive' 'replacement' 'rotate' 'screamy' 'shame' 'skil' 'sort'\n",
      " 'stay' 'subject' 'syrupy' 'thinly' 'traditional' 'unacceptable'\n",
      " 'unpleasant' 'verbatim' 'waste' 'woo']\n",
      "\n",
      "Le nbr d'occurrence des 50 premiers termes :\n",
      "[('way', 2706), ('plug', 1794), ('u', 2547), ('unles', 2591), ('converter', 515), ('good', 1055), ('case', 343), ('excellent', 844), ('value', 2638), ('great', 1072), ('jawbone', 1305), ('tie', 2465), ('charger', 373), ('jiggle', 1315), ('line', 1398), ('right', 2032), ('decent', 613), ('volume', 2680), ('dozen', 724), ('hundr', 1195), ('imagine', 1216), ('fun', 1007), ('send', 2125), ('owner', 1688), ('needles', 1595), ('say', 2083), ('waste', 2700), ('money', 1549), ('time', 2468), ('sound', 2252), ('quality', 1908), ('original', 1664), ('battery', 193), ('extend', 871), ('mere', 1513), ('notice', 1625), ('excessive', 848), ('static', 2298), ('headset', 1123), ('design', 644), ('odd', 1641), ('ear', 755), ('clip', 419), ('comfortable', 450), ('highly', 1145), ('recommend', 1956), ('blue', 244), ('tooth', 2489), ('phone', 1754), ('advise', 48)]\n"
     ]
    }
   ],
   "source": [
    "# On a déjà fait le nécessaire plus hatut. \n",
    "# On met un \"if False\" pour ne pas exécuter sauf ...\n",
    "# Eventuellement NE pas utiliser : plus lourd à installer\n",
    "from nltk import word_tokenize          \n",
    "from nltk.stem import WordNetLemmatizer \n",
    "\n",
    "if True : # Mettre 3false\" pour ne pas afficher des messages d'erreur \n",
    "    # Il y a des problèmes avec la ligne suivante sur certaine machines\n",
    "    from pattern.en import lemma,lexeme\n",
    "    import nltk\n",
    "    from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "    class LemmaTokenizer(object):\n",
    "        def __init__(self):\n",
    "            self.wnl = WordNetLemmatizer()\n",
    "        def __call__(self, articles):\n",
    "            #return [lemma(t) for t in word_tokenize(articles) if t.lower() in words]\n",
    "\n",
    "            return [lemma(t) for t in word_tokenize(articles) if t.lower() in words and \\\n",
    "                    t.lower() not in stop_words \\\n",
    "                    #and t.lower() not in word_tokenize(stop_words).encode() \\ # génère un pb de 'byte' ?!\n",
    "                    # cas des strs spécifiques non filtrés\n",
    "                    and t not in [\"''\", '--', '1.2', '1/2', '18th', '2-3', '20th', '4.00', '4.2', '``']\\\n",
    "                    and t.lower() not in string.punctuation and not t.isdigit()]\n",
    "\n",
    "        \n",
    "        \n",
    "    words = set(nltk.corpus.words.words())\n",
    "\n",
    "    count_vec_lemmatise = CountVectorizer(tokenizer=LemmaTokenizer(), stop_words=\"english\", analyzer='word', \n",
    "                                ngram_range=(1, 1), max_df=1.0, min_df=1, max_features=None)\n",
    "\n",
    "    # Transforms the data into a bag of words\n",
    "    count_train = count_vec_lemmatise.fit(df_papers[\"Avis\"])\n",
    "    bag_of_words = count_vec_lemmatise.transform(df_papers[\"Avis\"])\n",
    "\n",
    "    # Print the first 10 features of the count_vec\n",
    "    print(\"Les 50 premiers termes:\\n{}\".format(count_vec_lemmatise.get_feature_names_out()[:50]))\n",
    "    print(\"\\nTous les 50 termes:\\n{}\".format(count_vec_lemmatise.get_feature_names_out()[::50])) # Tous les 50 termes\n",
    "    #print(type(count_train.vocabulary_))\n",
    "    #print(\"Vocabulary content:\\n {}\".format(count_train.vocabulary_))\n",
    "\n",
    "    #les 50 premiers mots et leur nbr d'occurrence\n",
    "    print(\"\\nLe nbr d'occurrence des 50 premiers termes :\")\n",
    "    print([(k,v)  for k,v in count_train.vocabulary_.items()][:50])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.3- Etape TfIdf\n",
    "Commencons d'abord avec un exemple simple.\n",
    "#### 2.2.3.1 Un exemple simple        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "vocabulary_ :  {'the': 7, 'quick': 6, 'brown': 0, 'fox': 2, 'jumped': 3, 'over': 5, 'lazy': 4, 'yellow': 8, 'dog': 1}\n",
      "idf_ :  [1.69314718 1.28768207 1.28768207 1.69314718 1.69314718 1.69314718\n",
      " 1.69314718 1.         1.69314718]\n",
      "(1, 9)\n",
      "[[0.34195062 0.26006226 0.26006226 0.34195062 0.34195062 0.34195062\n",
      "  0.34195062 0.40392309 0.34195062]]\n"
     ]
    }
   ],
   "source": [
    "# Pour comprendre\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "import numpy as np\n",
    "\n",
    "# liste de  documents\n",
    "text = [\"The quick brown fox jumped over the lazy yellow dog.\", \"The dog.\", \"The fox\"]\n",
    "# Création de transform\n",
    "vectorizer = TfidfVectorizer(max_df=10, min_df=1)\n",
    "# tokenize et construire le vocab\n",
    "vectorizer.fit(text)\n",
    "# summarize\n",
    "print(\"vocabulary_ : \" , vectorizer.vocabulary_)\n",
    "print(\"idf_ : \" ,vectorizer.idf_)\n",
    "# encode document\n",
    "vector = vectorizer.transform([text[0]])\n",
    "# summarize encoded vector\n",
    "print(vector.shape)\n",
    "print(vector.toarray())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Explications**\n",
    "\n",
    "Ici un vocabulaire de 9 mots a été appris.  Il y a 9 mots (termes) différents.\n",
    "\n",
    "Chaque mot est assigné à un entier (son indice) dans le vecteur de réels en sortie des calculs de TfIdf (ici \"vectorizer\").\n",
    "\n",
    "Le Idf (inverse document frequency minimal) est ici =1 qui a été calculé pour le 7e mot (\"the\", en partant de 0). \"The\" est le mot le plus fréquent et donc son inverse (Idf) est le pus petit !\n",
    "La table est donc normalisée (min Idf =1.0)\n",
    "\n",
    "On a ensuite demandé à encoder le premier \"document\" (la première phrase de la liste avec 9 mots différents) et le résultat est un vecteur de 9 réels de TfIdf (cette fois) pour les différents mots de cette phrase.\n",
    "On constate que les mots “the“, “fox“, et “dog” ont des valeurs différentes par rapport aux autres mots de la phrase (qui sont tous à 0.34195062)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fin Exemple\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2.3.2 **Calcul TfIdf de notre corpus**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\" size=\"3\"> Si vous avez installé \"Pattern\", vou spouvez changer la 1ere ligne de 1a cellule\n",
    "suivante par :      \n",
    "    \n",
    "TfIdf_lemmatise = TfidfVectorizer(tokenizer=lemma, stop_words=\"english\",\\\n",
    "     smooth_idf=False, sublinear_tf=False, norm=None, analyzer='word')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/alex/venv-conda-3.9/lib/python3.9/site-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\n",
      "/home/alex/venv-conda-3.9/lib/python3.9/site-packages/sklearn/feature_extraction/text.py:409: UserWarning: Your stop_words may be inconsistent with your preprocessing. Tokenizing the stop words generated tokens ['acros', 'afterward', 'alway', 'anythe', 'everythe', 'hundr', 'indee', 'les', 'make', 'nevertheles', 'nothe', 'perhap', 'seriou', 'somethe', 'thu', 'u', 'wherea'] not in stop_words.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1) Les 10 dernières lignes de la  matrice TfIdf (en ligne : les indices, en colonne les termes/mots) :\n",
      "      abandon  abhor  ability  able  abound  abroad  absolute  absolutely  \\\n",
      "2240      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "2241      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "2242      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "2243      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "2244      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "2245      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "2246      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "2247      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "2248      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "2249      0.0    0.0      0.0   0.0     0.0     0.0       0.0         0.0   \n",
      "\n",
      "      abstruse  abysmal  ...  yellow  yellowtail  young  younger  youthful  \\\n",
      "2240       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "2241       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "2242       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "2243       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "2244       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "2245       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "2246       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "2247       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "2248       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "2249       0.0      0.0  ...     0.0         0.0    0.0      0.0       0.0   \n",
      "\n",
      "      yucky  yummy    z  zero  zombie  \n",
      "2240    0.0    0.0  0.0   0.0     0.0  \n",
      "2241    0.0    0.0  0.0   0.0     0.0  \n",
      "2242    0.0    0.0  0.0   0.0     0.0  \n",
      "2243    0.0    0.0  0.0   0.0     0.0  \n",
      "2244    0.0    0.0  0.0   0.0     0.0  \n",
      "2245    0.0    0.0  0.0   0.0     0.0  \n",
      "2246    0.0    0.0  0.0   0.0     0.0  \n",
      "2247    0.0    0.0  0.0   0.0     0.0  \n",
      "2248    0.0    0.0  0.0   0.0     0.0  \n",
      "2249    0.0    0.0  0.0   0.0     0.0  \n",
      "\n",
      "[10 rows x 2786 columns]\n",
      "--------------------------------------------------\n",
      "2) Quelques indice Idf pour certains mots :\n",
      "         idf_weights\n",
      "abandon     9.006368\n",
      "abhor       9.006368\n",
      "ability     7.396930\n",
      "able        7.620073\n",
      "abound      9.006368\n",
      "...              ...\n",
      "yucky       9.006368\n",
      "yummy       7.620073\n",
      "z           9.006368\n",
      "zero        7.396930\n",
      "zombie      9.006368\n",
      "\n",
      "[2786 rows x 1 columns]\n",
      "--------------------------------------------------\n",
      "2bis) Le 100 premiers termes : colonnes de la matrice TfIdf\n",
      "['abandon' 'abhor' 'ability' 'able' 'abound' 'abroad' 'absolute'\n",
      " 'absolutely' 'abstruse' 'abysmal' 'academy' 'accept' 'acceptable'\n",
      " 'access' 'accessible' 'accessory' 'accident' 'accidentally' 'accord'\n",
      " 'accordingly' 'accountant' 'accurate' 'accurately' 'accuse' 'ache'\n",
      " 'achievement' 'acknowledge' 'acros' 'act' 'action' 'activate' 'actor'\n",
      " 'actres' 'actual' 'actually' 'ad' 'adaptation' 'adapter' 'add' 'addition'\n",
      " 'additional' 'address' 'adhesive' 'admiration' 'admit' 'adorable'\n",
      " 'adrift' 'adventure' 'advise' 'aerial' 'aesthetically' 'affect'\n",
      " 'affordable' 'afraid' 'afternoon' 'age' 'aggravate' 'ago' 'agree' 'ahead'\n",
      " 'aimles' 'air' 'airport' 'akin' 'ala' 'alarm' 'alert' 'alike' 'allergy'\n",
      " 'allot' 'allow' 'alongside' 'aluminum' 'alway' 'amateurish' 'amaze'\n",
      " 'amazingly' 'ambience' 'ample' 'amuse' 'anatomist' 'angel' 'angle'\n",
      " 'angry' 'anguish' 'animate' 'animation' 'ann' 'anniversary' 'annoy'\n",
      " 'answer' 'ant' 'antithesi' 'anythe' 'apart' 'apartment' 'apologize'\n",
      " 'apology' 'appall' 'apparently']\n",
      "--------------------------------------------------\n",
      "3) Le 100 derniers termes de la matrice = colonnes de la matrice\n",
      "['waitres' 'wake' 'walk' 'wall' 'wallet' 'want' 'war' 'warm' 'warmer'\n",
      " 'warmth' 'warn' 'warranty' 'wartime' 'wash' 'waste' 'watch' 'watchable'\n",
      " 'water' 'waterproof' 'wave' 'way' 'waylay' 'weak' 'wear' 'weave' 'web'\n",
      " 'wed' 'week' 'weekend' 'weekly' 'weight' 'weird' 'welcome' 'welsh'\n",
      " 'whatsoever' 'whine' 'whiny' 'white' 'whoa' 'wholesome' 'wide' 'wife'\n",
      " 'wild' 'wildly' 'willie' 'wily' 'win' 'wind' 'window' 'wine' 'winner'\n",
      " 'wire' 'wireless' 'wise' 'wish' 'wit' 'witty' 'wo' 'wobbly' 'wonder'\n",
      " 'wonderful' 'wonderfully' 'wong' 'wont' 'woo' 'wood' 'wooden' 'word'\n",
      " 'work' 'worker' 'world' 'worry' 'worse' 'worst' 'worth' 'worthles'\n",
      " 'worthy' 'wouldnt' 'wow' 'wrap' 'wrapped' 'write' 'writer' 'wrong'\n",
      " 'wrongly' 'yawn' 'ye' 'yeah' 'year' 'yell' 'yellow' 'yellowtail' 'young'\n",
      " 'younger' 'youthful' 'yucky' 'yummy' 'z' 'zero' 'zombie']\n",
      "--------------------------------------------------\n",
      "Il y a 2400 documents, 3204 termes \n",
      "4) La matrice sur X_train : \n",
      " [[0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]]\n",
      "--------------------------------------------------\n",
      "5) Les 50 premiers termes du vocabulaire  et leur indices :\n",
      "[('way', 2706), ('plug', 1794), ('u', 2547), ('unles', 2591), ('converter', 515), ('good', 1055), ('case', 343), ('excellent', 844), ('value', 2638), ('great', 1072), ('jawbone', 1305), ('tie', 2465), ('charger', 373), ('jiggle', 1315), ('line', 1398), ('right', 2032), ('decent', 613), ('volume', 2680), ('dozen', 724), ('hundr', 1195), ('imagine', 1216), ('fun', 1007), ('send', 2125), ('owner', 1688), ('needles', 1595), ('say', 2083), ('waste', 2700), ('money', 1549), ('time', 2468), ('sound', 2252), ('quality', 1908), ('original', 1664), ('battery', 193), ('extend', 871), ('mere', 1513), ('notice', 1625), ('excessive', 848), ('static', 2298), ('headset', 1123), ('design', 644), ('odd', 1641), ('ear', 755), ('clip', 419), ('comfortable', 450), ('highly', 1145), ('recommend', 1956), ('blue', 244), ('tooth', 2489), ('phone', 1754), ('advise', 48)]\n",
      "Voici les vecteurs de quelques termes :\n",
      "\n",
      "valeur de Zero 2784\n",
      "      yucky\n",
      "0       0.0\n",
      "1       0.0\n",
      "2       0.0\n",
      "3       0.0\n",
      "4       0.0\n",
      "...     ...\n",
      "2245    0.0\n",
      "2246    0.0\n",
      "2247    0.0\n",
      "2248    0.0\n",
      "2249    0.0\n",
      "\n",
      "[2250 rows x 1 columns]\n",
      "       young\n",
      "0        0.0\n",
      "1        0.0\n",
      "2        0.0\n",
      "3        0.0\n",
      "4        0.0\n",
      "...      ...\n",
      "2245     0.0\n",
      "2246     0.0\n",
      "2247     0.0\n",
      "2248     0.0\n",
      "2249     0.0\n",
      "\n",
      "[2250 rows x 1 columns]\n",
      "      yellow\n",
      "0        0.0\n",
      "1        0.0\n",
      "2        0.0\n",
      "3        0.0\n",
      "4        0.0\n",
      "...      ...\n",
      "2245     0.0\n",
      "2246     0.0\n",
      "2247     0.0\n",
      "2248     0.0\n",
      "2249     0.0\n",
      "\n",
      "[2250 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "TfIdf_lemmatise = TfidfVectorizer(tokenizer=LemmaTokenizer(), stop_words=\"english\", \n",
    "                    smooth_idf=False, sublinear_tf=False, norm=None, analyzer='word')\n",
    "# max_df = min_df : par default=1.0\n",
    "\n",
    "corpus_fitted = TfIdf_lemmatise.fit(df_papers[\"Avis\"])\n",
    "train_lemmatise_transformed = corpus_fitted.transform(X_train[\"Avis\"])\n",
    "test_lemmatise_transformed = corpus_fitted.transform(X_test[\"Avis\"])\n",
    "\n",
    "# Une partie de la matrice TDIDF\n",
    "temp_df=pd.DataFrame(train_lemmatise_transformed.toarray(), columns=TfIdf_lemmatise.get_feature_names_out())\n",
    "\n",
    "#print(temp_df.columns.values)\n",
    "print(\"1) Les 10 dernières lignes de la  matrice TfIdf (en ligne : les indices, en colonne les termes/mots) :\")\n",
    "print(temp_df.tail(10))\n",
    "print( \"-\"*50)\n",
    "\n",
    "df_idf = pd.DataFrame(TfIdf_lemmatise.idf_, index=TfIdf_lemmatise.get_feature_names_out(),columns=[\"idf_weights\"])\n",
    "print(\"2) Quelques indice Idf pour certains mots :\")\n",
    "print(df_idf)\n",
    "print(\"-\"*50)\n",
    "\n",
    "print(\"2bis) Le 100 premiers termes : colonnes de la matrice TfIdf\")\n",
    "liste_termes=TfIdf_lemmatise.get_feature_names_out()\n",
    "print(liste_termes[:100])\n",
    "print(\"-\"*50)\n",
    "\n",
    "print(\"3) Le 100 derniers termes de la matrice = colonnes de la matrice\")\n",
    "print(liste_termes[-100:])\n",
    "print(\"-\"*50)\n",
    "\n",
    "print(\"Il y a 2400 documents, 3204 termes \")\n",
    "print (\"4) La matrice sur X_train : \\n\", train_lemmatise_transformed.toarray())\n",
    "\n",
    "print(\"-\"*50)\n",
    "print(\"5) Les 50 premiers termes du vocabulaire  et leur indices :\")\n",
    "print([(k,v)  for k,v in TfIdf_lemmatise.vocabulary_.items()][:50])\n",
    "\n",
    "print(\"Voici les vecteurs de quelques termes :\")\n",
    "try : # Suivant le mot donné, il y a erreur si le mot n'existe pas\n",
    "    print(\"\\nvaleur de Zero\", TfIdf_lemmatise.vocabulary_[\"zero\"])\n",
    "    TfIdf_lemmatise.vocabulary_['zero']\n",
    "except : \n",
    "     print(\"Certains mots / temes n'existent pas\")\n",
    "        \n",
    "try : # Suivant le mot donné, il y a erreur si le mot n'existe pas\n",
    "    print(pd.DataFrame([temp_df[\"yucky\"]], index=[\"yucky\"]).T)\n",
    "except : \n",
    "     print(\"Certains mots / temes n'existent pas\")\n",
    "\n",
    "try : # Suivant le mot donné, il y a erreur si le mot n'existe pas\n",
    "    print(pd.DataFrame([temp_df[\"young\"]], index=[\" young\"]).T)\n",
    "except : \n",
    "     print(\"Certains mots / temes n'existent pas\")\n",
    "\n",
    "try : # Suivant le mot donné, il y a erreur si le mot n'existe pas\n",
    "    print(pd.DataFrame([temp_df[\"yellow\"]],index=[\"yellow\"]).T)\n",
    "except : \n",
    "     print(\"Certains mots / temes n'existent pas\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=\"4\"> On a maintenant la matrice TdIdf.</font>\n",
    "On peut déjà faire des calculs de similarité avec.  \n",
    "**Commençons d'abord un exemple avec une BD de news**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.4- Un exemple de calcul de similarité par cosinus\n",
    "\n",
    "__Les données viennent de newsgroupe__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La taille de la matrice :  (11314, 130107)\n",
      "Exemples de lignes de la matrice TfIdf (voir les valeurs non nulles): \n",
      "   (0, 86580)\t0.13157118714240987\n",
      "  (0, 128420)\t0.04278499079283093\n",
      "  (0, 35983)\t0.03770448563619875\n",
      "  (0, 35187)\t0.09353930598317124\n",
      "  (0, 66098)\t0.09785515708314481\n",
      "  (0, 114428)\t0.05511105154696676\n",
      "  (0, 78955)\t0.05989856888061599\n",
      "  (0, 94362)\t0.055457031390147224\n",
      "  (0, 76722)\t0.06908779999621749\n",
      "  (0, 57308)\t0.1558717009157704\n",
      "  (0, 62221)\t0.02921527992427867\n",
      "  (0, 128402)\t0.05922294083277842\n",
      "  (0, 67156)\t0.07313443922740179\n",
      "  (0, 123989)\t0.08207027465330353\n",
      "  (0, 90252)\t0.031889368795417566\n",
      "  (0, 63363)\t0.08342748387969037\n",
      "  (0, 78784)\t0.0633940918806495\n",
      "  (0, 96144)\t0.10826904490745741\n",
      "  (0, 128026)\t0.060622095889758885\n",
      "  (0, 109271)\t0.10844724822064673\n",
      "  (0, 51730)\t0.09714744057976722\n",
      "  (0, 86001)\t0.07000411445838192\n",
      "  (0, 83256)\t0.08844382496462173\n",
      "  (0, 113986)\t0.17691750674853082\n",
      "  (0, 37565)\t0.03431760442478462\n",
      "  :\t:\n",
      "  (0, 4605)\t0.06332603952480323\n",
      "  (0, 76032)\t0.019219463052223086\n",
      "  (0, 92081)\t0.09913274493911223\n",
      "  (0, 40998)\t0.0780136819691811\n",
      "  (0, 79666)\t0.10936401252414274\n",
      "  (0, 89362)\t0.06521174306303763\n",
      "  (0, 118983)\t0.037085978050619146\n",
      "  (0, 90379)\t0.019928859956645867\n",
      "  (0, 98949)\t0.16068606055394932\n",
      "  (0, 64095)\t0.03542092427131355\n",
      "  (0, 95162)\t0.03447138409326312\n",
      "  (0, 87620)\t0.035671863140815795\n",
      "  (0, 114731)\t0.14447275512784058\n",
      "  (0, 68532)\t0.07325812342131596\n",
      "  (0, 37780)\t0.38133891259493113\n",
      "  (0, 123984)\t0.036854292634593756\n",
      "  (0, 111322)\t0.01915671802495043\n",
      "  (0, 114688)\t0.06214070986309586\n",
      "  (0, 85354)\t0.03696978508816316\n",
      "  (0, 124031)\t0.10798795154169122\n",
      "  (0, 50527)\t0.054614286588587246\n",
      "  (0, 118280)\t0.2118680720828169\n",
      "  (0, 123162)\t0.2597090245735688\n",
      "  (0, 75358)\t0.35383501349706165\n",
      "  (0, 56979)\t0.057470154074851294\n",
      "\n",
      " TfIdf du 1er Document (tfidf[0:1]) : \n",
      "   (0, 86580)\t0.13157118714240987\n",
      "  (0, 128420)\t0.04278499079283093\n",
      "  (0, 35983)\t0.03770448563619875\n",
      "  (0, 35187)\t0.09353930598317124\n",
      "  (0, 66098)\t0.09785515708314481\n",
      "  (0, 114428)\t0.05511105154696676\n",
      "  (0, 78955)\t0.05989856888061599\n",
      "  (0, 94362)\t0.055457031390147224\n",
      "  (0, 76722)\t0.06908779999621749\n",
      "  (0, 57308)\t0.1558717009157704\n",
      "  (0, 62221)\t0.02921527992427867\n",
      "  (0, 128402)\t0.05922294083277842\n",
      "  (0, 67156)\t0.07313443922740179\n",
      "  (0, 123989)\t0.08207027465330353\n",
      "  (0, 90252)\t0.031889368795417566\n",
      "  (0, 63363)\t0.08342748387969037\n",
      "  (0, 78784)\t0.0633940918806495\n",
      "  (0, 96144)\t0.10826904490745741\n",
      "  (0, 128026)\t0.060622095889758885\n",
      "  (0, 109271)\t0.10844724822064673\n",
      "  (0, 51730)\t0.09714744057976722\n",
      "  (0, 86001)\t0.07000411445838192\n",
      "  (0, 83256)\t0.08844382496462173\n",
      "  (0, 113986)\t0.17691750674853082\n",
      "  (0, 37565)\t0.03431760442478462\n",
      "  :\t:\n",
      "  (0, 4605)\t0.06332603952480323\n",
      "  (0, 76032)\t0.019219463052223086\n",
      "  (0, 92081)\t0.09913274493911223\n",
      "  (0, 40998)\t0.0780136819691811\n",
      "  (0, 79666)\t0.10936401252414274\n",
      "  (0, 89362)\t0.06521174306303763\n",
      "  (0, 118983)\t0.037085978050619146\n",
      "  (0, 90379)\t0.019928859956645867\n",
      "  (0, 98949)\t0.16068606055394932\n",
      "  (0, 64095)\t0.03542092427131355\n",
      "  (0, 95162)\t0.03447138409326312\n",
      "  (0, 87620)\t0.035671863140815795\n",
      "  (0, 114731)\t0.14447275512784058\n",
      "  (0, 68532)\t0.07325812342131596\n",
      "  (0, 37780)\t0.38133891259493113\n",
      "  (0, 123984)\t0.036854292634593756\n",
      "  (0, 111322)\t0.01915671802495043\n",
      "  (0, 114688)\t0.06214070986309586\n",
      "  (0, 85354)\t0.03696978508816316\n",
      "  (0, 124031)\t0.10798795154169122\n",
      "  (0, 50527)\t0.054614286588587246\n",
      "  (0, 118280)\t0.2118680720828169\n",
      "  (0, 123162)\t0.2597090245735688\n",
      "  (0, 75358)\t0.35383501349706165\n",
      "  (0, 56979)\t0.057470154074851294\n",
      "\n",
      " Et son texte : \n",
      " [\"From: lerxst@wam.umd.edu (where's my thing)\\nSubject: WHAT car is this!?\\nNntp-Posting-Host: rac3.wam.umd.edu\\nOrganization: University of Maryland, College Park\\nLines: 15\\n\\n I was wondering if anyone out there could enlighten me on this car I saw\\nthe other day. It was a 2-door sports car, looked to be from the late 60s/\\nearly 70s. It was called a Bricklin. The doors were really small. In addition,\\nthe front bumper was separate from the rest of the body. This is \\nall I know. If anyone can tellme a model name, engine specs, years\\nof production, where this car is made, history, or whatever info you\\nhave on this funky looking car, please e-mail.\\n\\nThanks,\\n- IL\\n   ---- brought to you by your neighborhood Lerxst ----\\n\\n\\n\\n\\n\"]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.datasets import fetch_20newsgroups\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.metrics.pairwise import linear_kernel\n",
    "\n",
    "twenty = fetch_20newsgroups()\n",
    "tfidf = TfidfVectorizer().fit_transform(twenty.data)\n",
    "print(\"La taille de la matrice : \", tfidf.shape)\n",
    "print(\"Exemples de lignes de la matrice TfIdf (voir les valeurs non nulles): \\n\", tfidf[0:1][:3])\n",
    "\n",
    "print(\"\\n TfIdf du 1er Document (tfidf[0:1]) : \\n\", tfidf[0:1])\n",
    "print(\"\\n Et son texte : \\n\", twenty.data[0:1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Similarité entre le 1er doc et les autres**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "cosine_similarities :  [1.         0.04405974 0.11017033 ... 0.04433678 0.04457107 0.0329325 ]\n",
      "--------------------------------------------------\n",
      "\n",
      "La valeur du vecteur related_docs_indices :  [    0   958 10576  3277]\n",
      "\n",
      "Et la valeur du premier document proche  (lui même ?): \n",
      " From: lerxst@wam.umd.edu (where's my thing)\n",
      "Subject: WHAT car is this!?\n",
      "Nntp-Posting-Host: rac3.wam.umd.edu\n",
      "Organization: University of Maryland, College Park\n",
      "Lines: 15\n",
      "\n",
      " I was wondering if anyone out there could enlighten me on this car I saw\n",
      "the other day. It was a 2-door sports car, looked to be from the late 60s/\n",
      "early 70s. It was called a Bricklin. The doors were really small. In addition,\n",
      "the front bumper was separate from the rest of the body. This is \n",
      "all I know. If anyone can tellme a model name, engine specs, years\n",
      "of production, where this car is made, history, or whatever info you\n",
      "have on this funky looking car, please e-mail.\n",
      "\n",
      "Thanks,\n",
      "- IL\n",
      "   ---- brought to you by your neighborhood Lerxst ----\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Et la valeur du 2e document proche : \n",
      " From: rseymour@reed.edu (Robert Seymour)\n",
      "Subject: Re: WHAT car is this!?\n",
      "Article-I.D.: reed.1993Apr21.032905.29286\n",
      "Reply-To: rseymour@reed.edu\n",
      "Organization: Reed College, Portland, OR\n",
      "Lines: 26\n",
      "\n",
      "In article <1993Apr20.174246.14375@wam.umd.edu> lerxst@wam.umd.edu (where's my  \n",
      "thing) writes:\n",
      "> \n",
      ">  I was wondering if anyone out there could enlighten me on this car I saw\n",
      "> the other day. It was a 2-door sports car, looked to be from the late 60s/\n",
      "> early 70s. It was called a Bricklin. The doors were really small. In  \n",
      "addition,\n",
      "> the front bumper was separate from the rest of the body. This is \n",
      "> all I know. If anyone can tellme a model name, engine specs, years\n",
      "> of production, where this car is made, history, or whatever info you\n",
      "> have on this funky looking car, please e-mail.\n",
      "\n",
      "Bricklins were manufactured in the 70s with engines from Ford. They are rather  \n",
      "odd looking with the encased front bumper. There aren't a lot of them around,  \n",
      "but Hemmings (Motor News) ususally has ten or so listed. Basically, they are a  \n",
      "performance Ford with new styling slapped on top.\n",
      "\n",
      ">    ---- brought to you by your neighborhood Lerxst ----\n",
      "\n",
      "Rush fan?\n",
      "\n",
      "--\n",
      "Robert Seymour\t\t\t\trseymour@reed.edu\n",
      "Physics and Philosophy, Reed College\t(NeXTmail accepted)\n",
      "Artificial Life Project\t\t\tReed College\n",
      "Reed Solar Energy Project (SolTrain)\tPortland, OR\n",
      "\n",
      "\n",
      "Et la valeur du 3e document proche : \n",
      " From: anuster@wam.umd.edu (Anu Tuli)\n",
      "Subject: Car for Sale\n",
      "Nntp-Posting-Host: rac3.wam.umd.edu\n",
      "Organization: University of Maryland, College Park\n",
      "Distribution: usa\n",
      "Lines: 35\n",
      "\n",
      "From mikefran Wed Apr 21 10:55:39 EDT 1993\n",
      "Article: 56 of csc.general\n",
      "Newsgroups: dc.forsale,dc.general,um.general,csc.general\n",
      "Path: wam.umd.edu!mikefran\n",
      "From: mikefran@wam.umd.edu (Michael Francis)\n",
      "Subject: Car for Sale\n",
      "Message-ID: <1993Apr21.142729.7039@wam.umd.edu>\n",
      "Keywords: 1981 Volkswagon Scirocco\n",
      "Sender: usenet@wam.umd.edu (USENET News system)\n",
      "Nntp-Posting-Host: rac3.wam.umd.edu\n",
      "Organization: Workstations at Maryland, University of Maryland, College Park\n",
      "Distribution: csc,um,dc\n",
      "Date: Wed, 21 Apr 1993 14:27:29 GMT\n",
      "\n",
      "\n",
      "1981 Volkswagon Scirocco \n",
      "\n",
      "   Gold exterior and interior\n",
      "   5 speed transmission\n",
      "   AM/FM Stereo with cassette\n",
      "   Sunroof\n",
      "   Engine in good condition\n",
      "   New Tires\n",
      "   Needs $300 work on front left control arm because of damage caused by\n",
      "     pothole.\n",
      "   Runs well \n",
      "   Asking $800.00  AS IS / OBO.\n",
      "\n",
      "   email: mikefran@wam.umd.edu\n",
      "\n",
      " \n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Calcul de la similarité entre le premier doc et les autres\n",
    "#print(\"Le 1er doc : \", twenty.data[0]) #  le 1er doc le plus similaire sera lui mm (le 1er) !\n",
    "cosine_similarities = linear_kernel(tfidf[0:1], tfidf).flatten()\n",
    "\n",
    "# ou calculer cosin similarities comme ceci :\n",
    "cosine_similarities = cosine_similarity(tfidf[0:1], tfidf).flatten()\n",
    "\n",
    "print(\"\\ncosine_similarities : \", cosine_similarities)\n",
    "related_docs_indices = cosine_similarities.argsort()[:-5:-1]\n",
    "print('-'*50)\n",
    "print(\"\\nLa valeur du vecteur related_docs_indices : \", related_docs_indices)\n",
    "print(\"\\nEt la valeur du premier document proche  (lui même ?): \\n\", twenty.data[related_docs_indices[0]])\n",
    "print(\"\\nEt la valeur du 2e document proche : \\n\", twenty.data[related_docs_indices[1]])\n",
    "print(\"\\nEt la valeur du 3e document proche : \\n\", twenty.data[related_docs_indices[2]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=\"4\">   Fin de l'exemple </font>\n",
    "---\n",
    "***\n",
    "<font size=\"4\">  Revenons à nos données :</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Un exemple d'avis :  Nice blanket of moz over top but i feel like this was done to cover up the subpar food.\n",
      "---------------\n",
      "\n",
      "TFIDF du query :   (0, 2501)\t9.006367567650246\n",
      "  (0, 1190)\t6.926926025970411\n",
      "  (0, 1084)\t9.006367567650246\n",
      "  (0, 1055)\t3.635729539522584\n",
      "  (0, 149)\t6.367310238034988\n",
      "  (0, 92)\t9.006367567650246\n",
      "\n",
      "cosine_similarities entre les 2 phrases : [0. 0. 0. ... 0. 0. 0.]\n",
      "\n",
      "elements non. nuls  du consine :  [0.06041407 0.17111881 0.08772926 0.09704747 0.0396816  0.04744736\n",
      " 0.04249041 0.06853495 0.05358078 0.02835221 0.0863332  0.06569773\n",
      " 0.06116887 0.06917064 0.21392788 0.1957163  0.0863332  0.05921539\n",
      " 0.10779273 0.03662838 0.1957163  0.10635041 0.0878677  0.07998539\n",
      " 0.03035502 0.04367694 0.03903531 0.34276102 0.03258619 0.10024324\n",
      " 0.11743218 0.34276102 0.0548005  0.12983349 0.07312283 0.06553252\n",
      " 0.10737983 0.1957163  0.06181918 0.05242053 0.04402211 0.08182257\n",
      " 0.07120751 0.09704747 0.04206988 0.06619942 0.05681388 0.04593757\n",
      " 0.05863438 0.05222576 0.05006667 0.05193926 0.08497611 0.34276102\n",
      " 0.05565903 0.03623678 0.04015475 0.1353016  0.0754091  0.18437295\n",
      " 0.078378   0.07731782 0.03751731 0.09331867 0.34276102 0.03520043\n",
      " 0.06293687 0.09530243 0.03139892 0.08580917 0.05462342 0.12642029\n",
      " 0.12776608 0.04265386 0.04364233 0.05032977 0.06293047 0.09607586\n",
      " 0.1957163  0.04372555 0.15040228 0.05302821 0.10075064 0.10358666\n",
      " 0.34276102 0.06958034 0.29060089 0.09218442 0.0397694  0.09421409\n",
      " 0.07840922 0.1051114  0.06835422 0.0383566  0.07701883 0.05520475\n",
      " 0.04214924 0.06276218 0.06041561 0.12943587 0.11085673 0.07455927\n",
      " 0.03038436 0.08175683 0.07842316 0.05473774 0.11627739 0.09549795\n",
      " 0.11081543 0.05964753 0.04893251 0.10358666 0.18547048 0.05425142\n",
      " 0.12214576 0.06587496 0.05583417 0.06460851 0.14768059 0.05839513\n",
      " 0.07082941 0.02973703 0.11081543 0.05828487 0.03731973 0.04405804\n",
      " 0.04810701 0.04017409 0.05764052 0.04150638 0.0587611  0.05337837\n",
      " 0.07726359 0.06368169 0.07326327 0.08968687 0.06057187 0.04414564\n",
      " 0.06848876 0.04236712 0.0489917  0.07983841 0.06352073 0.05115204\n",
      " 0.11081543 0.06755393 0.03994102 0.0691311  0.02908101 0.05365782\n",
      " 0.10779273 0.04876139 0.05135754 0.05029154 0.08570095 0.07814543\n",
      " 0.1957163  0.03197758 0.03579251 0.02486515 0.04679665 0.06951543\n",
      " 0.04772204 0.12776608 0.05611834 0.07594556 0.04959976 0.025451\n",
      " 0.03327948 0.1957163 ]\n",
      "0.0\n",
      "\n",
      "Les indices des documents proches du query avec similarité par cosinus p/r à train set:\n",
      "[ 427  706  338 1085  824 1149  155  249  997 2219]\n",
      "\n",
      "Le query =  Just whatever you do, avoid \"Groove\" as its the antithesis of all that is good about Human Traffic.  \n",
      "\n",
      "Les documents proches du Query : Just whatever you do, avoid \"Groove\" as its the antithesis of all that is good about Human Traffic.  \n",
      "un docmument proche : Avoid at ALL costs!  \n",
      "un docmument proche : Avoid this one if you can.\n",
      "un docmument proche : Avoid at any and all costs.  \n",
      "un docmument proche : Avoid at all costs.  \n",
      "un docmument proche : Avoid, avoid, avoid!  \n",
      "un docmument proche : Avoid this film at all costs.  \n",
      "un docmument proche : If you hate earbugs, avoid this phone by all means.\n",
      "un docmument proche : There still are good actors around!  \n",
      "un docmument proche : The transfers are very good.  \n",
      "un docmument proche : Good Service-check!\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "# Un exemple de vecteur\n",
    "print(\"Un exemple d'avis : \", np.array(X_test[\"Avis\"])[0])\n",
    "\n",
    "indice_query=1\n",
    "\n",
    "# QQ affichages : on le refait ensuite (voir query_TFIDF)\n",
    "#vecteur = TfIdf_lemmatise.transform([np.array(X_test[\"Avis\"])[indice_query]]) # ZZ : [] important\n",
    "#print(\"\\nLe vecteur TfIdf : \" , vecteur.toarray())\n",
    "#print(\"\\nLe TfIdf du vecteur : \", vecteur)\n",
    "# ZZ : ci-dessous, les affichages donnent les indices aussi. Seul les réels = TfIdf\n",
    "#print(\"\\nET les indices non nuls de ce vecteur : \", end='')\n",
    "#print(np.nonzero(vecteur.toarray())[1])# Les éléments non nul\n",
    "#print(\"**\", np.nonzero(vecteur)[1])# Les éléments non nul\n",
    "print('---------------')\n",
    "\n",
    "# Pour le cas de l'avis  d'indice indice_query\n",
    "query_TFIDF = TfIdf_lemmatise.transform([np.array(X_test[\"Avis\"])[indice_query]])\n",
    "print(\"\\nTFIDF du query :\", query_TFIDF)\n",
    "\n",
    "cosine_similarities = cosine_similarity(query_TFIDF, train_lemmatise_transformed).flatten()\n",
    "related_product_indices = cosine_similarities.argsort()[:-11:-1]\n",
    "print(\"\\ncosine_similarities entre les 2 phrases :\", cosine_similarities)\n",
    "\n",
    "print(\"\\nelements non. nuls  du consine : \", cosine_similarities[np.nonzero(cosine_similarities)])\n",
    "print(cosine_similarities[np.count_nonzero(cosine_similarities, axis=0)])\n",
    "print(\"\\nLes indices des documents proches du query avec similarité par cosinus p/r à train set:\")\n",
    "print(related_product_indices)\n",
    "\n",
    "words= np.array(X_test[\"Avis\"])[indice_query]\n",
    "print(\"\\nLe query = \", words)\n",
    "\n",
    "# Quelques un des documents proches :\n",
    "print(\"\\nLes documents proches du Query :\", np.array(X_test[\"Avis\"])[indice_query])\n",
    "for ind in related_product_indices :\n",
    "    print(\"un docmument proche :\", X_train.iloc[ind][0])\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Rappel des dimensions de notre corpus (train & test)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2250, 2786), (750, 2786))"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fit_train=train_lemmatise_transformed\n",
    "fit_test = test_lemmatise_transformed\n",
    "fit_train.shape, fit_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 : Supplément : calcul TfIdF (vactor space) sur le corpus par un Pipeline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Pour calculer l'indice TfIdf dans le corpus, il faut d'abord compter le nombre d'occurrence du mot puis calculer son Tf puis son Idf et enfin son TfIdf.**\n",
    "\n",
    "Les deux étapes (comptage et TfIdf) peuvent être mises en séquence à l'aide d'un *pipeline*.\n",
    "\n",
    "Pour __\"pipeline\"__, voir https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.make_pipeline.html\n",
    "\n",
    "__CountVectorizer__ produit un sac de mots (bag of words) : un vecteur avec le nbr d'occurrenecs des mots\n",
    "\n",
    "__TfidfTransformer__ prend ce \"sac\" et le transforme en une matrice avec la fréquence tf-idf (term frequency * inverted document frequency).\n",
    "\n",
    "*make_pipeline* regroupe les deux actions (qui peuvent également être faites séparément)\n",
    "\n",
    "On peut créer des pipelines à multiples étages qui enchainent les actions d'un étage au suivant :\n",
    "\n",
    "pipeline = Pipeline([\n",
    "    ('vect', CountVectorizer()),\n",
    "    ('tfidf', TfidfTransformer()),\n",
    "    ('clf', LogisticRegression())\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">**Remarque**</font>\n",
    "\n",
    "<font color=\"red\">* On a fait le même travail plus haut en Lemmatisant et on a déjà créer fit_train et fit_test</font>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfTransformer, CountVectorizer\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "if True :\n",
    "    # On a fait le travaille plus haut et déjà créer fit_train et fit_test\n",
    "    pipe = make_pipeline(CountVectorizer(), TfidfTransformer()) # Construire un Construct a Pipeline from the given estimators.\n",
    "    pipe.fit(X_train['Avis'])\n",
    "\n",
    "    fit_train = pipe.transform(X_train['Avis'])\n",
    "    fit_train.shape\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "if False :\n",
    "    print(fit_train.min(), fit_train.max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(750, 4376)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "fit_test = pipe.transform(X_test['Avis'])\n",
    "print(fit_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Partie Analyse \n",
    "### 2.4- Modèle arbre de décision\n",
    "**Un seul arbre de décision produira des résultats assez médiocres.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7133333333333334"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dt = DecisionTreeClassifier()\n",
    "dt.fit(fit_train, y_train)\n",
    "dt.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Le score est assez __médicore__; ce sera une base de comparaison.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.5- Modèle Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=50)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(n_estimators=50)"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "clf = RandomForestClassifier(n_estimators=50)\n",
    "clf.fit(fit_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8066666666666666"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\"> **Le score s'est un peu amélioré.**</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.5.1- D'autres métriques d'évaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_auc_score, roc_curve, auc\n",
    "score_t = clf.predict_proba(fit_test)\n",
    "score_a = clf.predict_proba(fit_train)\n",
    "fpr_t, tpr_t, seuil_t = roc_curve(y_test, score_t[:, 1])\n",
    "fpr_a, tpr_a, seuil_a = roc_curve(y_train, score_a[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.5.2 Courbe ROC (tpr vs. fpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Remarquer l'AUC\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 400x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "if True :\n",
    "    fig, ax = plt.subplots(1, 1, figsize=(4,4))\n",
    "    ax.plot([0, 1], [0, 1], 'k--')\n",
    "    aucf_t = auc(fpr_t, tpr_t)\n",
    "    ax.plot(fpr_t, tpr_t, label='auc=%1.5f' % aucf_t)\n",
    "    ax.set_title('Courbe ROC - classifieur de Polarités du test')\n",
    "    ax.legend();\n",
    "    \n",
    "print(\"Remarquer l'AUC\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.5.3 Comparaison des ROC du train et du test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Les AUCs train/test:', 1.0, 0.8760062293776311)"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "aucf_t = auc(fpr_t, tpr_t)\n",
    "aucf_a = auc(fpr_a, tpr_a)\n",
    "fig, axs = plt.subplots(1, 2, figsize=(8,4))\n",
    "\n",
    "axs[0].plot(fpr_a, tpr_a, label='auc=%1.5f' % aucf_t)\n",
    "axs[0].set_title('Courbe ROC - Apprentissage')\n",
    "axs[1].plot(fpr_t, tpr_t, label='auc=%1.5f' % aucf_a)\n",
    "axs[1].set_title('Courbe ROC - TEST')\n",
    "\n",
    "fig.suptitle('RendomForest :  Courbe ROC du classifieur de Polarités des données')\n",
    "(\"Les AUCs train/test:\", aucf_a, aucf_t)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. A propose des classifieurs en Text Mining (espace vectoriel) appliqués sur cette DB.\n",
    "-  La transformation du texte en feature génère beaucoup de variables;\n",
    "- __RF__ : Random Forest est une méta méthode aggrégative. Il peut y avoir des problèmes avec RF.\n",
    "    - Intuitivement, il y a un grand risque d'overfitting dans une espace à plusieurs centaines de dimensions, et donc quasiment vide d'échantillons.\n",
    "    - Un des aspects à prendre en compte dans RF est la profondeur de l'arbre. Par défaut, elle est de 10, soit  210=1024  décisions de seuils, soit au mieux  210  variables ce qui est loin du nombre de variables total.\n",
    "\n",
    "- __AD__ :  en présence de beaucoup de variables et un arbre de décision n'exploite quasiment que le fait qu'elles soient non nulles. \n",
    "    - Un arbre de décision consiste à prendre des décisions sur des seuils puis retourne une constante tirée d'une feuille de l'arbre. \n",
    "- __Modèles Linéaires__ : Un modèle linéaire ferait tout aussi bien l'affaire avec en plus la possibilité de tenir compte de la valeur de la variable.\n",
    "    - __MNB__ : le Multinomial Naive Bayes (utilisé pour la détection de spam), qui marche  bien sur BOW (les sacs de mots)\n",
    "    - __Logit__ :  La régression logistique fonctionne assez bien. \n",
    "    - __SVM Linéaire__ : LinearSVM est assez efficace aussi sur ces modèles.\n",
    "\n",
    "- Ces classificateurs améliorent sensiblement les performance des modèles \n",
    "\n",
    "- Les __n-grammes__ n'améliorent pas significativement les performances, \n",
    "- __SVD__ détériore parfois les performances\n",
    "- __word2vect__ améliore légèrement les performances."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(750, 4376)"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fit_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1-__modèle linéaire__ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Essayons d'abord avec un __modèle linéaire__ (__logit__)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.86"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression(solver='lbfgs')\n",
    "lr.fit(fit_train, y_train)\n",
    "lr.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Une amélioration du score**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2- Multinomial Bayesian (MNB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.856"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "mnb = MultinomialNB()\n",
    "mnb.fit(fit_train, y_train)\n",
    "mnb.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Encore un bon score**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.3- Retour au RandomForest\n",
    "* Si on augmente la profondeur de l'arbre, la forêt aléatoire peut __parfois__ être plus performante."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.78"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "clf20 = RandomForestClassifier(n_estimators=120, max_depth=20)\n",
    "clf20.fit(fit_train, y_train)\n",
    "clf20.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Pas tellement mieux.**  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3.1 Itération su Random Forest   \n",
    "Essayons d'autre combinaisons des paramètres dans une itération"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "clf1,10  : score =  0.475\n",
      "clf1,30  : score =  0.6116666666666667\n",
      "clf1,50  : score =  0.6466666666666666\n",
      "clf1,70  : score =  0.6683333333333333\n",
      "clf1,90  : score =  0.62\n",
      "clf51,10  : score =  0.73\n",
      "clf51,30  : score =  0.775\n",
      "clf51,50  : score =  0.7633333333333333\n",
      "clf51,70  : score =  0.78\n",
      "clf51,90  : score =  0.7766666666666666\n",
      "clf101,10  : score =  0.7533333333333333\n",
      "clf101,30  : score =  0.7833333333333333\n",
      "clf101,50  : score =  0.7566666666666667\n",
      "clf101,70  : score =  0.7983333333333333\n",
      "clf101,90  : score =  0.7766666666666666\n",
      "clf151,10  : score =  0.7666666666666667\n",
      "clf151,30  : score =  0.7916666666666666\n",
      "clf151,50  : score =  0.78\n",
      "clf151,70  : score =  0.7883333333333333\n",
      "clf151,90  : score =  0.7866666666666666\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "clfs=[(\"clf\"+str(N)+','+str(depth), RandomForestClassifier(n_estimators=N, max_depth=depth))  for N in range(1,200,50) for depth in range(10,100,20)]\n",
    "for nom, _clf_ in clfs :\n",
    "    _clf_.fit(fit_train, y_train)\n",
    "    print(nom, ' : score = ', _clf_.score(fit_test, y_test))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**La dernière combinaison semble meilleure**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3.2 Une des meilleures combinaisons (?)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7866666666666666"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf50_ = RandomForestClassifier(n_estimators=150, max_depth=90)\n",
    "clf50_.fit(fit_train, y_train)\n",
    "clf50_.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7766666666666666"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf50_ = RandomForestClassifier(n_estimators=100, max_depth=70)\n",
    "clf50_.fit(fit_train, y_train)\n",
    "clf50_.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####3.3.3.  Et une autre (200 arbres, profondeur max = 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7883333333333333"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf50 = RandomForestClassifier(n_estimators=200, max_depth=100)\n",
    "clf50.fit(fit_train, y_train)\n",
    "clf50.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.4- Gradient Boost\n",
    "* Un méta-modèle de __gradient boosting__ devrait dépasser les RFs puisque les arbres ne sont plus appris indépendemment les uns des autres."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7983333333333333"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "gbc40 = GradientBoostingClassifier(n_estimators=200, max_depth=40)\n",
    "gbc40.fit(fit_train, y_train)\n",
    "gbc40.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.5- SVM linéaire avec la méthode OneVsRestClassifier\n",
    "\n",
    "Connu également sous le nom de one-vs-all  \n",
    "dans cette méta-classifieur, on crée un classifieur per classe.\n",
    "\n",
    "**Cette méta-méthode a besoin** (en paramètre) d'une méthode de classification à utiliser.\n",
    "\n",
    "Extrait de la Doc :\n",
    "\n",
    "For each classifier, the class is fitted against all the other classes. In addition to its computational efficiency (only n_classes classifiers are needed), one advantage of this approach is its interpretability. Since each class is represented by one and one classifier only, __it is possible to gain knowledge about the class by inspecting its corresponding classifier. This is the most commonly used strategy for multiclass classification and is a fair default choice__."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8183333333333334"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.svm import LinearSVC\n",
    "modele_one_vs_linear_SVC= OneVsRestClassifier(LinearSVC())\n",
    "modele_one_vs_linear_SVC.fit(fit_train, y_train)\n",
    "modele_one_vs_linear_SVC.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__SVM se comporte souvent bien !__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.6- Classifieur SVM linéaire avec la méthode OneVsRestClassifier\n",
    "\n",
    "Même chose mais on utilise la méthode SVM (pour la classification : SVC)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.83"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "modele_one_vs_SVC = OneVsRestClassifier(SVC())\n",
    "modele_one_vs_SVC.fit(fit_train, y_train)\n",
    "modele_one_vs_SVC.score(fit_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Et en fonction des score, on choisit une des méthodes.**\n",
    "\n",
    "Pour simplifier, on choisit ici la régression logistique (**logit**) pour la suite.\n",
    "\n",
    "**MNB peut aussi faire l'affaire (voir ci-dessous).**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4- Les n-grammes\n",
    "L'approche Bag of Word (matrices Tf, TfIdf)  ci-dessus ne tient pas compte ni du contexte, ni de l'ordre des mots. Chaque phrase est convertie en un sac de mots (ou bag of words). \n",
    "\n",
    "On va tenir compte de séquence plus ou moins longue à l'ide des __n-grams__."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "# s'il faut télécharger des données\n",
    "# \n",
    "nltk_fait = True # A mettre dès le premier download\n",
    "if not nltk_fait :\n",
    "    import nltk\n",
    "    nltk.download('punkt')\n",
    "    nltk_fait == True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1 : Un exemple de 3-gram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(None, None, 'Food'),\n",
       " (None, 'Food', 'was'),\n",
       " ('Food', 'was', 'really'),\n",
       " ('was', 'really', 'boring'),\n",
       " ('really', 'boring', '.'),\n",
       " ('boring', '.', None),\n",
       " ('.', None, None)]"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from nltk.util import ngrams\n",
    "from nltk.tokenize import word_tokenize\n",
    "generated_ngrams = ngrams(word_tokenize(X_train.iloc[0,0]), 3, pad_left=True, pad_right=True)\n",
    "list(generated_ngrams)[:7]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.2- Utilisation du bi-gram     \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**On applique le principe de bi-gramme avec scikit-learn.**\n",
    "\n",
    "**On lémmatise,puis TfIdf sur les bi-grammes**\n",
    "\n",
    "Appliqué aux données de base."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2250, 20237)"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "\n",
    "pipe2 = make_pipeline(CountVectorizer(ngram_range=(1, 2)), TfidfTransformer())\n",
    "pipe2.fit(X_train['Avis'])\n",
    "fit_train2 = pipe2.transform(X_train['Avis'])\n",
    "fit_train2.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il y a plus de colonnes (normal !)\n",
    "\n",
    "**On vérifie** que les features ressemblent à des couples de mots (non traités / pas de lemmatisation)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['5020', '5020 is', '510', '510 and', '510 maintains', '510 to',\n",
       "       '5lb', '5lb piece', '680', '70'], dtype=object)"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cl = pipe2.steps[0]\n",
    "cl[1].get_feature_names_out()[100:110]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Gagné !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(750, 20237)"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fit_test2 = pipe2.transform(X_test['Avis'])\n",
    "fit_test2.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.2.1- Même aplication mais avec les données lemmatisées\n",
    "\n",
    "Appliqué aux données lemmatisées. (si Warning, lancez une 2e fois)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/alex/venv-conda-3.9/lib/python3.9/site-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\n",
      "/home/alex/venv-conda-3.9/lib/python3.9/site-packages/sklearn/feature_extraction/text.py:409: UserWarning: Your stop_words may be inconsistent with your preprocessing. Tokenizing the stop words generated tokens ['u'] not in stop_words.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2250, 22)\n"
     ]
    }
   ],
   "source": [
    "#count_vec_lemmatise = CountVectorizer(tokenizer=lemma, stop_words=\"english\", analyzer='word', \n",
    "#                            ngram_range=(1, 1), max_df=1.0, min_df=1, max_features=None)\n",
    "if True :\n",
    "    count_vec_lemmatise = CountVectorizer(tokenizer=lemma, stop_words=\"english\", analyzer='word', \n",
    "                                ngram_range=(1, 2), max_df=1.0, min_df=1, max_features=None)\n",
    "    pipe2_bis = make_pipeline(CountVectorizer(tokenizer=LemmaTokenizer(), stop_words=\"english\", analyzer='word', \n",
    "                                ngram_range=(1, 2), max_df=1.0, min_df=1, max_features=None), TfidfTransformer())\n",
    "    pipe2_bis.fit(X_train['Avis'])\n",
    "    fit_train2_bis = pipe2_bis.transform(X_train['Avis'])\n",
    "    print(fit_train2_bis.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "if True : \n",
    "    cl_bis = pipe2_bis.steps[0]\n",
    "    cl_bis[1].get_feature_names_out()[100:110]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(750, 22)"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fit_test2_bis = pipe2_bis.transform(X_test['Avis'])\n",
    "fit_test2_bis.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.3 - Application de la méthode Logit aux bi-grammes (crées sur les données de base)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "clf2 = LogisticRegression(solver='lbfgs')\n",
    "clf2.fit(fit_train2, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Et on 'fit'**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8493333333333334"
      ]
     },
     "execution_count": 252,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf2.score(fit_test2, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\"> Ce qui améliore   les résultats de façon significative.</font> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.3.1- Application de la méthode Logit aux bi-grammes (crées sur les données lemmatisées)\n",
    "**La même chose avec les données lemmatisées :**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogisticRegression()\n"
     ]
    }
   ],
   "source": [
    "if True :\n",
    "    from sklearn.linear_model import LogisticRegression\n",
    "    clf2_bis = LogisticRegression(solver='lbfgs')\n",
    "    print(clf2_bis.fit(fit_train2_bis, y_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Et on 'fit'**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5333333333333333\n"
     ]
    }
   ],
   "source": [
    "if True :\n",
    "    print(clf2_bis.score(fit_test2_bis, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Pas TOP !!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "class bisLemmaTokenizer(object):\n",
    "        def __init__(self):\n",
    "            self.wnl = WordNetLemmatizer()\n",
    "        def __call__(self, articles):\n",
    "            #return [lemma(t) for t in word_tokenize(articles) if t.lower() in words]\n",
    "\n",
    "            return [t for t in word_tokenize(articles) if t.lower() in words and \\\n",
    "                    t.lower() not in stop_words \\\n",
    "                    #and t.lower() not in word_tokenize(stop_words).encode() \\ # génère un pb de 'byte' ?!\n",
    "                    # cas des strs spécifiques non filtrés\n",
    "                    and t not in [\"''\", '--', '1.2', '1/2', '18th', '2-3', '20th', '4.00', '4.2', '``']\\\n",
    "                    and t.lower() not in string.punctuation and not t.isdigit()]\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**pas tellement Encourageant ?? !**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.4- Cross-validation\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "On ne l'applique qu'aux données de bse (non lémmatisées)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegressionCV(cv=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegressionCV</label><div class=\"sk-toggleable__content\"><pre>LogisticRegressionCV(cv=5)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegressionCV(cv=5)"
      ]
     },
     "execution_count": 257,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "clf2_ = LogisticRegressionCV(cv=5)\n",
    "clf2_.fit(fit_train2, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8613333333333333"
      ]
     },
     "execution_count": 258,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf2_.score(fit_test2, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">  Pas mal !</font>\n",
    "    \n",
    "__Rappel__ : Logit était un des meilleurs avec MNB.</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## 4.5-  Application de  MNB (sur les données de base)\n",
    "**D'abord MNB sur les données de de base !**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8506666666666667"
      ]
     },
     "execution_count": 259,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "mnb = MultinomialNB()\n",
    "mnb.fit(fit_train2, y_train)\n",
    "mnb.score(fit_test2, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.6- MNB avec Validation Croisée (XV)\n",
    "\n",
    "Pour rendre les résultats plus fiables, on doit faire XV en MNB.\n",
    "\n",
    "Pour cela, on applique \"k_folds MNB\" en partant du début du DB, transformé en 2-grams ...."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**K-folds** pratiqué sur l'ensemble des données\n",
    "\n",
    "On a besoin de créer les folds soi-même pour MNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3000, 25347)\n",
      "  (0, 23963)\t0.21817555202565733\n",
      "  (0, 23958)\t0.13646646001643659\n",
      "  (0, 23038)\t0.21817555202565733\n",
      "  (0, 23024)\t0.15086267181342922\n",
      "  (0, 22897)\t0.21817555202565733\n",
      "  (0, 22896)\t0.18179453499017778\n",
      "  (0, 22191)\t0.19998504350791754\n",
      "  (0, 22007)\t0.06983526375232646\n",
      "  (0, 21431)\t0.15086267181342922\n",
      "  (0, 21412)\t0.11373534790520554\n",
      "  (0, 21209)\t0.21817555202565733\n",
      "  (0, 20377)\t0.047500849751496446\n",
      "  (0, 18908)\t0.2075347866737308\n",
      "  (0, 18819)\t0.10268895845930259\n",
      "  (0, 16213)\t0.19998504350791754\n",
      "  (0, 16208)\t0.169053180331169\n",
      "  (0, 14096)\t0.21817555202565733\n",
      "  (0, 14033)\t0.12237002659602951\n",
      "  (0, 12915)\t0.17343724021803705\n",
      "  (0, 12888)\t0.1252488943815521\n",
      "  (0, 11195)\t0.17870351280406446\n",
      "  (0, 11084)\t0.06563245059819511\n",
      "  (0, 10933)\t0.17870351280406446\n",
      "  (0, 10761)\t0.06610745644244266\n",
      "  (0, 10446)\t0.11448165477794967\n",
      "  (0, 10369)\t0.21817555202565733\n",
      "  (0, 10317)\t0.16192793489944451\n",
      "  (0, 9706)\t0.19412900775576925\n",
      "  (0, 9692)\t0.12203139794376289\n",
      "  (0, 8644)\t0.21817555202565733\n",
      "  (0, 8638)\t0.12681612754354116\n",
      "  (0, 7968)\t0.169053180331169\n",
      "  (0, 7882)\t0.08556640209604605\n",
      "  (0, 4912)\t0.21817555202565733\n",
      "  (0, 3677)\t0.21817555202565733\n",
      "  (0, 3665)\t0.12237002659602951\n",
      "KFold(n_splits=20, random_state=0, shuffle=True)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold, cross_val_score\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(df_papers[[\"Avis\"]], df_papers['Polarite'])\n",
    "\n",
    "df_all=df_papers[['Avis','Polarite']]\n",
    "y_all=df_papers['Polarite']\n",
    "x_all=df_papers[\"Avis\"]\n",
    "\n",
    "pipe2_ = make_pipeline(CountVectorizer(ngram_range=(1, 2)),TfidfTransformer())\n",
    "pipe2_.fit(x_all)\n",
    "\n",
    "feat_train2_ = pipe2_.transform(x_all)\n",
    "print(feat_train2_.shape)\n",
    "print(feat_train2_[0])\n",
    "y_train2_=y_all\n",
    "\n",
    "Nb_folds=20\n",
    "k_fold = KFold(n_splits=Nb_folds , shuffle=True, random_state=0)\n",
    "k_fold.get_n_splits(df_all)\n",
    "print(k_fold)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.6.1- Création du modèle -->  score poly K-Folds  MNB\n",
    "**Avec 10-folds, on atteint 0.84 (comme  Logit)**\n",
    "\n",
    "**Avec 20-folds, on atteint 0.853 (mieux  Logit), ...**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRACE : Scores de chaque itération :  [0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334, 0.8533333333333334]\n",
      "La moyenn :  0.8533333333333333\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "mnb2 = MultinomialNB()\n",
    "Scores=[]\n",
    "\n",
    "for i in range(Nb_folds) :\n",
    "    #print(i, end=' ')\n",
    "    res=next(k_fold.split(feat_train2_), None)\n",
    "    x_train_ = feat_train2_[res[0]]\n",
    "    x_test_ = feat_train2_[res[1]]\n",
    "    y_train_  = y_all.iloc[res[0]]\n",
    "    y_test_ = y_all.iloc[res[1]]\n",
    "    model__ = mnb2.fit(x_train_, y_train_)\n",
    "    predictions_ = mnb2.predict(x_test_)\n",
    "    Scores.append(model__.score(x_test_, y_test_))\n",
    "print('TRACE : Scores de chaque itération : ', Scores)\n",
    "print('La moyenn : ', np.mean(Scores))\n",
    "#mnb.fit(feat_train2, y_train)\n",
    "# mnb.score(feat_test2, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\"> __On s'est donc fait une idée du meilleur résultat jsq'à présent !__</font>\n",
    "\n",
    "**On avance .....**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.7- A la recherche d'améliorer les résultats....\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.7.1  Réduction de dimension avec une SVD / ACP\n",
    "On choisit la méthode TruncatedSVD plutôt que l'ACP dont l'implantation ne supporte pas les features creux(sparses)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.7.2- Application du SVD à __Tf__ d'abord"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Avis'], dtype='object')\n",
      "2303                              Food was really boring.\n",
      "1381     God, and I can never get that 90 minutes back!  \n",
      "811                   #1 It Works - #2 It is Comfortable.\n",
      "1142    It is an hour and half waste of time, followin...\n",
      "1371    The plot was the same as pretty much every oth...\n",
      "                              ...                        \n",
      "2673                    What a great double cheeseburger!\n",
      "346             Reception is terrible and full of static.\n",
      "2697                                     I was mortified.\n",
      "1129    However, this didn't make up for the fact that...\n",
      "2538                                  Worst martini ever!\n",
      "Name: Avis, Length: 2250, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(X_train.keys())\n",
    "print(X_train['Avis'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2250, 300)"
      ]
     },
     "execution_count": 263,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.decomposition import TruncatedSVD\n",
    "pipe_svd = make_pipeline(CountVectorizer(), TruncatedSVD(n_components=300))\n",
    "pipe_svd.fit(X_train['Avis'])\n",
    "fit_train_svd = pipe_svd.transform(X_train['Avis'])\n",
    "fit_train_svd.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.7.3-  Application du  RF à ce résultat SVD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=50)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(n_estimators=50)"
      ]
     },
     "execution_count": 264,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_svd = RandomForestClassifier(n_estimators=50)\n",
    "clf_svd.fit(fit_train_svd, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7053333333333334"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fit_test_svd = pipe_svd.transform(X_test['Avis'])\n",
    "clf_svd.score(fit_test_svd, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7866666666666666"
      ]
     },
     "execution_count": 266,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr_svd = LogisticRegression(solver='lbfgs')\n",
    "lr_svd.fit(fit_train_svd, y_train)\n",
    "lr_svd.score(fit_test_svd, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## 4.8-Comparaison des méthodes "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Repartons de TF-IDF puis SVD puis Logit pour comparer**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8"
      ]
     },
     "execution_count": 267,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe_svd_tfidf = make_pipeline(CountVectorizer(), \n",
    "                     TfidfTransformer(),\n",
    "                     TruncatedSVD(n_components=300))\n",
    "pipe_svd_tfidf.fit(X_train['Avis'])\n",
    "fit_train_svd_tfidf = pipe_svd_tfidf.transform(X_train['Avis'])\n",
    "\n",
    "clf_svd_tfidf = LogisticRegression(solver='lbfgs')\n",
    "clf_svd_tfidf.fit(fit_train_svd_tfidf, y_train)\n",
    "\n",
    "fit_test_svd_tfidf = pipe_svd_tfidf.transform(X_test['Avis'])\n",
    "clf_svd_tfidf.score(fit_test_svd_tfidf, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\"> C'est (un peu) mieux mais cela reste moins bien que le tf-idf sans réduction de dimensions. </font>\n",
    "\n",
    "**Cela veut dire qu'il faut garder davantage de dimensions.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5- word2vec\n",
    "word2vec est une projection (comme ACP/SVD) en ce sens qu'il réduit les dimensions. \n",
    "\n",
    "Une relecture d'ACP et Auto Encoders pour comprendre le lien entre ACP, ACP non linéaire, réseaux de neurones et compression nous fera du bien !\n",
    "\n",
    "__word2vec__ est plus d'une ACP non linéaire car il prend en compte le contexte."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "# OK  FAIT : !/Users/alexandresaidi/opt/anaconda3/bin/pip3 install gensim\n",
    "# OK  FAIT : !/Users/alexandresaidi/opt/anaconda3/bin/pip3 install p Levenshtein\n",
    "if False :\n",
    "    !pip install gensim\n",
    "    !pip install Levenshtein"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['his',\n",
       " 'on',\n",
       " 'screen',\n",
       " 'presence',\n",
       " 'shined',\n",
       " 'thought',\n",
       " 'even',\n",
       " 'though',\n",
       " 'there',\n",
       " 'were',\n",
       " 'other',\n",
       " 'senior',\n",
       " 'actors',\n",
       " 'on',\n",
       " 'the',\n",
       " 'screen',\n",
       " 'with',\n",
       " 'him']"
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from gensim.utils import tokenize\n",
    "Avis = [list(tokenize(s, deacc=True, lower=True)) for s in X_train['Avis']]\n",
    "Avis[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**N.B. : Les paramètres d'apprentissage du modèle Word2Vec ne sont pas toujours décrit de façon explicite.**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2250"
      ]
     },
     "execution_count": 270,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from gensim.models import word2vec\n",
    "#model = word2vec.Word2Vec(Avis, size=300, window=20, min_count=2, workers=1, iter=100)\n",
    "model = word2vec.Word2Vec(Avis,  window=20, min_count=2, workers=1)\n",
    "model.corpus_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.1 HALT : Save the model !!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save('trained_word2vec.bin')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.2 Vecteur associé aux mots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Vecteur associé au mot after**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.12766968,  0.41114926, -0.01115404,  0.05169382,  0.16325916,\n",
       "       -0.74640715,  0.2699146 ,  0.89105666, -0.40607375, -0.32883108,\n",
       "       -0.1453936 , -0.39305004,  0.04914179,  0.26536164,  0.13936654,\n",
       "       -0.30557168,  0.36342728, -0.45275763,  0.08435892, -0.91476095,\n",
       "        0.4810084 ,  0.16188471,  0.30201578, -0.34207466, -0.2938233 ,\n",
       "       -0.03079732, -0.3347006 , -0.17213261, -0.25524208,  0.04822668,\n",
       "        0.47608572, -0.06135466,  0.1910234 , -0.34661013, -0.02943614,\n",
       "        0.5755988 ,  0.18558192, -0.23952731, -0.2783688 , -0.5842022 ,\n",
       "        0.1344876 , -0.30491477, -0.15895472,  0.21584024,  0.35471866,\n",
       "       -0.16082133, -0.35555416, -0.13018811,  0.21603845,  0.179608  ,\n",
       "        0.14026982, -0.29226223, -0.0870752 , -0.0263117 , -0.08850314,\n",
       "        0.10073767,  0.2766956 , -0.14003183, -0.39824146,  0.13667043,\n",
       "        0.11864848, -0.00782809,  0.1602534 , -0.00647726, -0.37263742,\n",
       "        0.3935823 ,  0.3362208 ,  0.34554753, -0.692624  ,  0.5939052 ,\n",
       "       -0.2793512 ,  0.23836079,  0.4790181 ,  0.02763588,  0.43956238,\n",
       "        0.07918125, -0.15691797,  0.23367518, -0.39154252, -0.02579045,\n",
       "       -0.38118294, -0.02981028, -0.34157002,  0.6852267 , -0.23661949,\n",
       "        0.06189811,  0.366165  ,  0.48069197,  0.5687485 ,  0.07860505,\n",
       "        0.6700779 ,  0.32005134,  0.01439146,  0.04205808,  0.79801255,\n",
       "        0.34147644,  0.15787946, -0.33124325,  0.12745   , -0.11372256],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = model.wv # .vocab\n",
    "# w2v.vocab[\"word\"]\n",
    "#list(vocab)#[:5]\n",
    "vocab['after']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Les dix premières coordonnées du vecteur associé au mot after.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((100,),\n",
       " array([-0.12766968,  0.41114926, -0.01115404,  0.05169382,  0.16325916,\n",
       "        -0.74640715,  0.2699146 ,  0.89105666, -0.40607375, -0.32883108],\n",
       "       dtype=float32))"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.wv['after'].shape, model.wv['after'][:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Et si le mot est inconnu**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"Key 'toto' not present\"\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    print(model.wv['toto'])\n",
    "except KeyError as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5.3 Similarité entre les mots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3 mots les plus proches de \"movie\"**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('of', 0.9998689889907837),\n",
       " ('and', 0.9998657703399658),\n",
       " ('the', 0.9998517036437988)]"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.wv.most_similar(positive=['movie'], topn = 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3 mots les plus proches de \"after\"**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('and', 0.9998399019241333),\n",
       " ('was', 0.9998385906219482),\n",
       " ('the', 0.9998370409011841)]"
      ]
     },
     "execution_count": 283,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.wv.most_similar(positive=['after'], topn = 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3 mots les plus proches de \"young\"**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('call', 0.9877576231956482),\n",
       " ('super', 0.9877095818519592),\n",
       " ('films', 0.9876782298088074)]"
      ]
     },
     "execution_count": 284,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.wv.most_similar(positive=['young'], topn = 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6- Vers Doc2Vect (manuel & expérimental)\n",
    "\n",
    "**Pour chaque phrase, on fait la somme des vecteurs associés aux mots qui la composent ou pas si le mot n'est pas dans le vocabulaire.**\n",
    "\n",
    "* Proche de __doc2vect__\n",
    "* Il y a probablement des fonctions déjà prêtes à l'emploi mais la documentation de gensim n'était pas assez explicite \n",
    "\n",
    "Réfs : \n",
    "\n",
    "Efficient Estimation of Word Representations in Vector Space     \n",
    "\n",
    "Distributed Representations of Words and Phrases and their Compositionality)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NB :  :  il existe des fonctions équivalentes !!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2250, 100)"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def get_vect(word, model):\n",
    "    try:\n",
    "        return model.wv[word]\n",
    "    except KeyError:\n",
    "        return np.zeros((model.vector_size,))\n",
    "# Somme\n",
    "def sum_vectors(phrase, model):\n",
    "    return sum(get_vect(w, model) for w in phrase)\n",
    "\n",
    "def word2vec_features(X, model):\n",
    "    feats = np.vstack([sum_vectors(p, model) for p in X])\n",
    "    return feats\n",
    "\n",
    "wv_train_feat = word2vec_features(X_train[\"Avis\"], model)\n",
    "wv_train_feat.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.1 Logit sur word2vect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=1000)"
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clfwv = LogisticRegression(solver='lbfgs', max_iter=1000)\n",
    "clfwv.fit(wv_train_feat, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ -7.03691576,  24.60918842,  -0.75375295, ..., -19.34270166,\n",
       "          7.85724418,  -7.19071147],\n",
       "       [-10.02819068,  35.42520335,  -1.1167499 , ..., -27.71937919,\n",
       "         11.1212775 , -10.25891086],\n",
       "       [ -7.7444046 ,  27.28239491,  -0.9141875 , ..., -21.47527908,\n",
       "          8.68236897,  -8.06971514],\n",
       "       ...,\n",
       "       [ -2.9423628 ,  10.31470088,  -0.27300781, ...,  -8.13426027,\n",
       "          3.28717501,  -3.02347554],\n",
       "       [ -3.47238301,  12.30123544,  -0.43551564, ...,  -9.6420259 ,\n",
       "          3.84918905,  -3.60390083],\n",
       "       [ -1.67162384,   5.74246043,  -0.17529328, ...,  -4.54993329,\n",
       "          1.8021079 ,  -1.6969712 ]])"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wv_test_feat = word2vec_features(X_test[\"Avis\"], model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5533333333333333"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clfwv.score(wv_test_feat, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NB**\n",
    "\n",
    "La performance est bien moindre et encore  moindre que la performance obtenue avec l'ACP. \n",
    "Il faudrait 'tuner' les hyperparamètres de l'apprentissage ou réutiliser un model appris sur un corpus similaire aux données initiales mais bien plus grand. \n",
    "\n",
    "On peut constater que la fonction de similarités ne retourne pas des résultat très intéressants."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['a',\n",
       " 'ability',\n",
       " 'able',\n",
       " 'about',\n",
       " 'above',\n",
       " 'absolutely',\n",
       " 'abysmal',\n",
       " 'access',\n",
       " 'acted',\n",
       " 'acting']"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.wv.index_to_key[:10]\n",
    "# words = list(sorted(model.wv))\n",
    "words=sorted(model.wv.index_to_key)\n",
    "words[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1194682/3882633673.py:7: FutureWarning: In a future version of pandas all arguments of DataFrame.pivot will be keyword-only.\n",
      "  pandas.DataFrame(rows).pivot(\"w1\", \"w2\", \"d\")\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>w2</th>\n",
       "      <th>about</th>\n",
       "      <th>above</th>\n",
       "      <th>absolutely</th>\n",
       "      <th>after</th>\n",
       "      <th>before</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>w1</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>about</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.993614</td>\n",
       "      <td>0.999089</td>\n",
       "      <td>0.999712</td>\n",
       "      <td>0.999027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>above</th>\n",
       "      <td>0.993614</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.993084</td>\n",
       "      <td>0.993799</td>\n",
       "      <td>0.993214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>absolutely</th>\n",
       "      <td>0.999089</td>\n",
       "      <td>0.993084</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999136</td>\n",
       "      <td>0.998575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>after</th>\n",
       "      <td>0.999712</td>\n",
       "      <td>0.993799</td>\n",
       "      <td>0.999136</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.998972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>before</th>\n",
       "      <td>0.999027</td>\n",
       "      <td>0.993214</td>\n",
       "      <td>0.998575</td>\n",
       "      <td>0.998972</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "w2             about     above  absolutely     after    before\n",
       "w1                                                            \n",
       "about       1.000000  0.993614    0.999089  0.999712  0.999027\n",
       "above       0.993614  1.000000    0.993084  0.993799  0.993214\n",
       "absolutely  0.999089  0.993084    1.000000  0.999136  0.998575\n",
       "after       0.999712  0.993799    0.999136  1.000000  0.998972\n",
       "before      0.999027  0.993214    0.998575  0.998972  1.000000"
      ]
     },
     "execution_count": 289,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subset = ['after', 'before', words[3], words[4], words[5]]\n",
    "rows = []\n",
    "for w in subset:\n",
    "    for ww in subset:\n",
    "        rows.append(dict(w1=w, w2=ww, d=model.wv.similarity(w, ww)))\n",
    "import pandas\n",
    "pandas.DataFrame(rows).pivot(\"w1\", \"w2\", \"d\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# That's ALL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercice \n",
    "\n",
    "Choisir quelques phrases en anglais (une centaine) et essayer de faire quelques un de ces manipulations.\n",
    "\n",
    "Essayer d'utilliser les résultats Word2Vect de Google (attention BD un peu grande), appliquer word2vect et comparer\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-3.9",
   "language": "python",
   "name": "anaconda-3.9"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "toc-showcode": false
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
